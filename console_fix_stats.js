// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞...');

// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ supabase –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function getSupabaseClient() {
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ supabase –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
  if (window.supabase) {
    return window.supabase;
  }
  
  // –ò—â–µ–º –≤ React DevTools
  if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
    const reactRoots = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.renderers;
    for (const rendererId in reactRoots) {
      const renderer = reactRoots[rendererId];
      if (renderer && renderer.findFiberByHostInstance) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å supabase
        const fiber = renderer.findFiberByHostInstance(document.body);
        if (fiber) {
          let current = fiber;
          while (current) {
            if (current.memoizedProps && current.memoizedProps.supabase) {
              return current.memoizedProps.supabase;
            }
            current = current.return;
          }
        }
      }
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç supabase
  const supabaseUrl = 'YOUR_SUPABASE_URL'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
  const supabaseKey = 'YOUR_SUPABASE_ANON_KEY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
  
  if (supabaseUrl === 'YOUR_SUPABASE_URL') {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –∏ –∫–ª—é—á Supabase –≤ —Å–∫—Ä–∏–ø—Ç–µ');
    return null;
  }
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase
  return window.supabase.createClient(supabaseUrl, supabaseKey);
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ fetch API
async function fixStatsWithFetch() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const fixStatsResponse = await fetch('/api/fix-monthly-stats', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ familyId: 1 })
    });
    
    if (fixStatsResponse.ok) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API');
    } else {
      console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ SQL
async function fixStatsDirectly() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é...');
  
  // SQL –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fixStatsSQL = `
    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    DELETE FROM monthly_stats WHERE family_id = 1;
    
    -- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–∫—Ç—è–±—Ä—è 2024
    INSERT INTO monthly_stats (family_id, month, year, total_spent, total_calories, avg_calories_per_day, receipts_count)
    SELECT 
      1 as family_id,
      '2024-10' as month,
      2024 as year,
      COALESCE(SUM(r.total_amount), 0) as total_spent,
      COALESCE(SUM(p.calories * ph.quantity), 0) as total_calories,
      COALESCE(ROUND(SUM(p.calories * ph.quantity) / 31), 0) as avg_calories_per_day,
      COUNT(DISTINCT r.id) as receipts_count
    FROM receipts r
    LEFT JOIN product_history ph ON ph.family_id = r.family_id 
      AND EXTRACT(YEAR FROM ph.date) = 2024 
      AND EXTRACT(MONTH FROM ph.date) = 10
    LEFT JOIN products p ON ph.product_id = p.id
    WHERE r.family_id = 1 
      AND EXTRACT(YEAR FROM r.date) = 2024 
      AND EXTRACT(MONTH FROM r.date) = 10;
    
    -- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ—è–±—Ä—è 2024
    INSERT INTO monthly_stats (family_id, month, year, total_spent, total_calories, avg_calories_per_day, receipts_count)
    SELECT 
      1 as family_id,
      '2024-11' as month,
      2024 as year,
      COALESCE(SUM(r.total_amount), 0) as total_spent,
      COALESCE(SUM(p.calories * ph.quantity), 0) as total_calories,
      COALESCE(ROUND(SUM(p.calories * ph.quantity) / 30), 0) as avg_calories_per_day,
      COUNT(DISTINCT r.id) as receipts_count
    FROM receipts r
    LEFT JOIN product_history ph ON ph.family_id = r.family_id 
      AND EXTRACT(YEAR FROM ph.date) = 2024 
      AND EXTRACT(MONTH FROM ph.date) = 11
    LEFT JOIN products p ON ph.product_id = p.id
    WHERE r.family_id = 1 
      AND EXTRACT(YEAR FROM r.date) = 2024 
      AND EXTRACT(MONTH FROM r.date) = 11;
  `;
  
  console.log('üìù SQL –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
  console.log(fixStatsSQL);
  console.log('\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç SQL –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Supabase Dashboard');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function checkCurrentState() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –∏–ª–∏ sessionStorage
  const storedData = localStorage.getItem('supabase-data') || sessionStorage.getItem('supabase-data');
  if (storedData) {
    console.log('üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ localStorage:', JSON.parse(storedData));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const reactElements = document.querySelectorAll('[data-reactroot], [data-react-helmet]');
  console.log('‚öõÔ∏è React —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', reactElements.length);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const updateButton = document.querySelector('button[title="–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"], button:contains("–û–±–Ω–æ–≤–∏—Ç—å")');
  if (updateButton) {
    console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –≤ –¥–∞—à–±–æ—Ä–¥–µ');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  await checkCurrentState();
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å supabase –∫–ª–∏–µ–Ω—Ç
  const supabase = getSupabaseClient();
  
  if (supabase) {
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try {
      const { data: stats, error } = await supabase
        .from('monthly_stats')
        .select('*')
        .eq('family_id', 1);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      } else {
        console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
  } else {
    console.log('‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ API
    await fixStatsWithFetch();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SQL –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await fixStatsDirectly();
  }
  
  console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ fix_monthly_stats.sql –≤ Supabase Dashboard');
  console.log('2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –≤ –¥–∞—à–±–æ—Ä–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (F5)');
  console.log('4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
