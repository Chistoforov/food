// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async function testCaloriesUpdate() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const products = await window.supabase
      .from('products')
      .select('*')
      .eq('family_id', 1)
      .limit(1);
    
    if (products.data.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const product = products.data[0];
    const originalCalories = product.calories;
    const newCalories = originalCalories + 100;
    
    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${product.name}`);
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ${originalCalories} –∫–∫–∞–ª`);
    console.log(`üîÑ –ù–æ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ${newCalories} –∫–∫–∞–ª`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const statsBefore = await window.supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', 1)
      .eq('month', '2024-10')
      .eq('year', 2024)
      .single();
    
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${statsBefore.data?.total_calories || 0} –∫–∫–∞–ª`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
    const updateResult = await window.supabase
      .from('products')
      .update({ calories: newCalories })
      .eq('id', product.id);
    
    if (updateResult.error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', updateResult.error);
      return;
    }
    
    console.log('‚úÖ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const statsAfter = await window.supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', 1)
      .eq('month', '2024-10')
      .eq('year', 2024)
      .single();
    
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${statsAfter.data?.total_calories || 0} –∫–∫–∞–ª`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
    await window.supabase
      .from('products')
      .update({ calories: originalCalories })
      .eq('id', product.id);
    
    console.log('üîÑ –ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const caloriesChanged = statsAfter.data?.total_calories !== statsBefore.data?.total_calories;
    
    if (caloriesChanged) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∞—Å—å');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCaloriesUpdate();
