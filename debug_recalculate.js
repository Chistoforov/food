// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function checkStats() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã
    const response = await fetch('/api/supabase', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: 'SELECT * FROM monthly_stats WHERE family_id = 1 ORDER BY year DESC, month DESC'
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–∞–∑–µ:', data);
      return data;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤
async function checkReceipts() {
  try {
    const response = await fetch('/api/supabase', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: 'SELECT id, date, total_amount, items_count FROM receipts WHERE family_id = 1 ORDER BY date DESC'
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('üßæ –ß–µ–∫–∏ –≤ –±–∞–∑–µ:', data);
      return data;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
async function checkHistory() {
  try {
    const response = await fetch('/api/supabase', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: `SELECT ph.date, ph.quantity, ph.price, p.name, p.calories 
                FROM product_history ph 
                JOIN products p ON ph.product_id = p.id 
                WHERE ph.family_id = 1 
                ORDER BY ph.date DESC 
                LIMIT 10`
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('üì¶ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:', data);
      return data;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function manualRecalculate() {
  console.log('üîÑ –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏
    const receipts = await checkReceipts();
    if (!receipts || receipts.length === 0) {
      console.log('‚ùå –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthsData = {};
    receipts.forEach(receipt => {
      const date = new Date(receipt.date);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const key = `${year}-${month}`;
      
      if (!monthsData[key]) {
        monthsData[key] = {
          year,
          month,
          totalSpent: 0,
          receiptsCount: 0,
          receipts: []
        };
      }
      
      monthsData[key].totalSpent += receipt.total_amount || 0;
      monthsData[key].receiptsCount += 1;
      monthsData[key].receipts.push(receipt);
    });
    
    console.log('üìÖ –ú–µ—Å—è—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', monthsData);
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const [monthKey, data] of Object.entries(monthsData)) {
      console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ${monthKey}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
      const startDate = `${data.year}-${data.month}-01`;
      const endDate = `${data.year}-${String(parseInt(data.month) + 1).padStart(2, '0')}-01`;
      
      const historyResponse = await fetch('/api/supabase', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: `SELECT ph.quantity, p.calories 
                  FROM product_history ph 
                  JOIN products p ON ph.product_id = p.id 
                  WHERE ph.family_id = 1 
                  AND ph.date >= '${startDate}' 
                  AND ph.date < '${endDate}'`
        })
      });
      
      let totalCalories = 0;
      if (historyResponse.ok) {
        const history = await historyResponse.json();
        totalCalories = history.reduce((sum, item) => {
          return sum + ((item.calories || 0) * (item.quantity || 0));
        }, 0);
      }
      
      const daysInMonth = new Date(data.year, parseInt(data.month), 0).getDate();
      const avgCaloriesPerDay = Math.round(totalCalories / daysInMonth);
      
      console.log(`üìä ${monthKey}: $${data.totalSpent}, ${totalCalories} –∫–∞–ª–æ—Ä–∏–π, ${data.receiptsCount} —á–µ–∫–æ–≤`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ
      const updateResponse = await fetch('/api/supabase', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: `INSERT INTO monthly_stats (family_id, month, year, total_spent, total_calories, avg_calories_per_day, receipts_count)
                  VALUES (1, '${monthKey}', ${data.year}, ${data.totalSpent}, ${totalCalories}, ${avgCaloriesPerDay}, ${data.receiptsCount})
                  ON CONFLICT (family_id, month, year) 
                  DO UPDATE SET 
                    total_spent = EXCLUDED.total_spent,
                    total_calories = EXCLUDED.total_calories,
                    avg_calories_per_day = EXCLUDED.avg_calories_per_day,
                    receipts_count = EXCLUDED.receipts_count,
                    updated_at = NOW()`
        })
      });
      
      if (updateResponse.ok) {
        console.log(`‚úÖ ${monthKey} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${monthKey}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await checkStats();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
async function debugRecalculate() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É...');
  
  console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:');
  await checkStats();
  
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–∏:');
  await checkReceipts();
  
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫:');
  await checkHistory();
  
  console.log('\n4Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç:');
  await manualRecalculate();
  
  console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugRecalculate();
