// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–µ–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
import { createClient } from '@supabase/supabase-js'
import fs from 'fs'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function addTestReceipts() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–µ–∫–æ–≤...')
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('./add_test_receipts.sql', 'utf8')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = sqlContent
      .split(';')
      .map(q => q.trim())
      .filter(q => q.length > 0 && !q.startsWith('--'))
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${queries.length} SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i]
      if (query.trim()) {
        console.log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${i + 1}/${queries.length}...`)
        
        try {
          const { data, error } = await supabase.rpc('exec_sql', { sql_query: query })
          
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error)
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          } else {
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`)
          }
        } catch (err) {
          console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, err.message)
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await checkStatistics()
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

async function checkStatistics() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: monthlyStats, error: statsError } = await supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', 1)
      .order('year', { ascending: false })
      .order('month', { ascending: false })
    
    if (statsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError)
      return
    }
    
    console.log('\nüìà –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    monthlyStats.forEach(stat => {
      console.log(`${stat.year}-${stat.month}:`)
      console.log(`  üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: $${stat.total_spent}`)
      console.log(`  üî• –ö–∞–ª–æ—Ä–∏–∏: ${stat.total_calories}`)
      console.log(`  üìÖ –°—Ä–µ–¥–Ω–µ–µ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: ${stat.avg_calories_per_day}`)
      console.log(`  üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: ${stat.receipts_count}`)
      console.log('')
    })
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .eq('family_id', 1)
      .order('purchase_count', { ascending: false })
    
    if (productsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', productsError)
      return
    }
    
    console.log('üõí –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫:')
    products.slice(0, 10).forEach((product, index) => {
      console.log(`${index + 1}. ${product.name} - ${product.purchase_count} –ø–æ–∫—É–ø–æ–∫, ${product.calories} –∫–∞–ª–æ—Ä–∏–π`)
    })
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–∞—Ö
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('*')
      .eq('family_id', 1)
      .order('date', { ascending: false })
    
    if (receiptsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', receiptsError)
      return
    }
    
    console.log('\nüßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:')
    receipts.slice(0, 5).forEach((receipt, index) => {
      console.log(`${index + 1}. ${receipt.date} - $${receipt.total_amount} (${receipt.items_count} —Ç–æ–≤–∞—Ä–æ–≤)`)
    })
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`)
    console.log(`üßæ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: ${receipts.length}`)
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${monthlyStats.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addTestReceipts()
