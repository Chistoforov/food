/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–æ–≤
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test_delete_simple.js
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDeleteReceipt() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤...');
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('*')
      .eq('family_id', 1)
      .order('date', { ascending: false });
    
    if (receiptsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', receiptsError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–æ–≤: ${receipts?.length || 0}`);
    if (receipts && receipts.length > 0) {
      console.table(receipts.map(r => ({
        id: r.id,
        date: r.date,
        total: r.total_amount,
        items: r.items_count
      })));
    }
    
    if (!receipts || receipts.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
    const testReceipt = receipts[0];
    console.log(`üß™ –£–¥–∞–ª—è–µ–º —á–µ–∫ #${testReceipt.id}...`);
    
    const { error: deleteError } = await supabase
      .from('receipts')
      .delete()
      .eq('id', testReceipt.id);
    
    if (deleteError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError.message);
      
      if (deleteError.message.includes('policy') || deleteError.message.includes('RLS')) {
        console.log('\nüí° –ü–†–û–ë–õ–ï–ú–ê: RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
        console.log('üîß –†–ï–®–ï–ù–ò–ï:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
        console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
        console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ fix_rls_policies.sql');
      }
      return;
    }
    
    console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î!');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
    const { data: checkReceipt, error: checkError } = await supabase
      .from('receipts')
      .select('id')
      .eq('id', testReceipt.id)
      .single();
    
    if (checkError || !checkReceipt) {
      console.log('‚úÖ –ß–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î!');
      console.log('üéâ –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
    } else {
      console.log('‚ùå –ß–µ–∫ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î!');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDeleteReceipt();
