/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SupabaseService
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDirectDelete() {
  try {
    console.log('üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–æ–≤...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤...');
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('*')
      .eq('family_id', 1)
      .order('date', { ascending: false });
    
    if (receiptsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', receiptsError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–æ–≤: ${receipts?.length || 0}`);
    if (receipts && receipts.length > 0) {
      console.table(receipts.map(r => ({
        id: r.id,
        date: r.date,
        total: r.total_amount,
        items: r.items_count
      })));
    }
    
    if (!receipts || receipts.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    // 2. –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –Ω–∞–ø—Ä—è–º—É—é...');
    const testReceipt = receipts[0];
    console.log(`üß™ –£–¥–∞–ª—è–µ–º —á–µ–∫ #${testReceipt.id}...`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    const { data: relatedHistory, error: historyError } = await supabase
      .from('product_history')
      .select('id')
      .eq('receipt_id', testReceipt.id);
    
    if (!historyError && relatedHistory) {
      console.log(`üìä –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π product_history: ${relatedHistory.length}`);
    }
    
    // –£–¥–∞–ª—è–µ–º —á–µ–∫
    const { error: deleteError } = await supabase
      .from('receipts')
      .delete()
      .eq('id', testReceipt.id);
    
    if (deleteError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError.message);
      console.log('üìã –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', JSON.stringify(deleteError, null, 2));
      
      if (deleteError.message.includes('recalculate_monthly_stats')) {
        console.log('\nüí° –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ –µ—â–µ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç recalculate_monthly_stats!');
        console.log('üîß –†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL-—Å–∫—Ä–∏–ø—Ç remove_all_triggers.sql');
      } else if (deleteError.message.includes('date')) {
        console.log('\nüí° –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã!');
        console.log('üîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      return;
    }
    
    console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
    const { data: checkReceipt, error: checkError } = await supabase
      .from('receipts')
      .select('id')
      .eq('id', testReceipt.id)
      .single();
    
    if (checkError || !checkReceipt) {
      console.log('‚úÖ –ß–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î!');
      console.log('üéâ –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
    } else {
      console.log('‚ùå –ß–µ–∫ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î!');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('üìã –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', JSON.stringify(error, null, 2));
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDirectDelete();
