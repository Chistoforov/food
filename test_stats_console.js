// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Node.js: node test_stats_console.js

const { createClient } = require('@supabase/supabase-js');

// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

if (SUPABASE_URL === 'https://your-project.supabase.co' || SUPABASE_ANON_KEY === 'your-anon-key') {
  console.log('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY');
  console.log('–ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function checkData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–∏
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('*')
      .eq('family_id', 1);
    
    if (receiptsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', receiptsError);
      return;
    }
    
    console.log('üìÑ –ß–µ–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', receipts?.length || 0);
    if (receipts && receipts.length > 0) {
      console.log('üìÖ –î–∞—Ç—ã —á–µ–∫–æ–≤:', receipts.map(r => r.date).slice(0, 5));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .eq('family_id', 1);
    
    if (productsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', productsError);
      return;
    }
    
    console.log('üõí –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', products?.length || 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
    const { data: history, error: historyError } = await supabase
      .from('product_history')
      .select('*')
      .eq('family_id', 1);
    
    if (historyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', historyError);
      return;
    }
    
    console.log('üìä –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:', history?.length || 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: stats, error: statsError } = await supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', 1);
    
    if (statsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError);
      return;
    }
    
    console.log('üìà –ó–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats?.length || 0);
    if (stats && stats.length > 0) {
      console.log('üìÖ –ú–µ—Å—è—Ü—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:', stats.map(s => `${s.month}-${s.year}`));
      console.log('üí∞ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats.map(s => ({
        month: `${s.month}-${s.year}`,
        spent: s.total_spent,
        calories: s.total_calories,
        receipts: s.receipts_count
      })));
    }
    
    return { receipts, products, history, stats };
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

async function fixStats() {
  console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('*')
      .eq('family_id', 1);
    
    if (receiptsError) throw receiptsError;
    
    if (!receipts || receipts.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthsData = new Map();
    
    receipts.forEach(receipt => {
      const date = new Date(receipt.date);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const key = `${year}-${month}`;
      
      if (!monthsData.has(key)) {
        monthsData.set(key, { year, month, totalSpent: 0, receiptsCount: 0 });
      }
      
      const data = monthsData.get(key);
      data.totalSpent += receipt.total_amount || 0;
      data.receiptsCount += 1;
    });
    
    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${monthsData.size} –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞:`, Array.from(monthsData.keys()));
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    for (const [monthKey, data] of monthsData) {
      console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ${monthKey}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
      const { data: monthHistory, error: monthHistoryError } = await supabase
        .from('product_history')
        .select(`
          quantity,
          products(calories)
        `)
        .eq('family_id', 1)
        .gte('date', `${data.year}-${data.month}-01`)
        .lt('date', `${data.year}-${String(parseInt(data.month) + 1).padStart(2, '0')}-01`);
      
      if (monthHistoryError) throw monthHistoryError;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏
      const totalCalories = monthHistory?.reduce((sum, h) => {
        const calories = h.products?.calories || 0;
        const quantity = h.quantity || 0;
        return sum + (calories * quantity);
      }, 0) || 0;
      
      const daysInMonth = new Date(data.year, parseInt(data.month), 0).getDate();
      const avgCaloriesPerDay = daysInMonth > 0 ? Math.round(totalCalories / daysInMonth) : 0;
      
      console.log(`üìä ${monthKey}: ‚Ç¨${data.totalSpent.toFixed(2)}, ${totalCalories} –∫–∫–∞–ª, ${data.receiptsCount} —á–µ–∫–æ–≤`);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await supabase
        .from('monthly_stats')
        .delete()
        .eq('family_id', 1)
        .eq('month', monthKey)
        .eq('year', data.year);
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const { error: insertError } = await supabase
        .from('monthly_stats')
        .insert({
          family_id: 1,
          month: monthKey,
          year: data.year,
          total_spent: data.totalSpent,
          total_calories: totalCalories,
          avg_calories_per_day: avgCaloriesPerDay,
          receipts_count: data.receiptsCount
        });
      
      if (insertError) throw insertError;
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: finalStats, error: finalStatsError } = await supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', 1)
      .order('year', { ascending: false })
      .order('month', { ascending: false });
    
    if (finalStatsError) throw finalStatsError;
    
    console.log('üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.table(finalStats);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  
  const data = await checkData();
  
  if (data && data.receipts && data.receipts.length > 0) {
    await fixStats();
  } else {
    console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
}

main().catch(console.error);
