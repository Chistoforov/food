/**
 * –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
 * 2. –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞
 * 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
 * 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–µ–∫–æ–≤
 * 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã VITE_SUPABASE_URL –∏–ª–∏ VITE_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

async function getProductsCount(familyId) {
  const { count, error } = await supabase
    .from('products')
    .select('*', { count: 'exact', head: true })
    .eq('family_id', familyId)
  
  if (error) throw error
  return count
}

async function getProductByName(familyId, name) {
  const { data, error } = await supabase
    .from('products')
    .select('*')
    .eq('family_id', familyId)
    .eq('name', name)
    .maybeSingle()
  
  if (error) throw error
  return data
}

async function getProductHistory(productId) {
  const { data, error } = await supabase
    .from('product_history')
    .select('*')
    .eq('product_id', productId)
  
  if (error) throw error
  return data
}

async function getMonthlyStats(familyId, month, year) {
  const { data, error } = await supabase
    .from('monthly_stats')
    .select('*')
    .eq('family_id', familyId)
    .eq('month', `${year}-${month.padStart(2, '0')}`)
    .maybeSingle()
  
  if (error) throw error
  return data
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
async function runTest() {
  console.log('\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–º—å—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: families, error: familiesError } = await supabase
      .from('families')
      .select('*')
      .limit(1)
    
    if (familiesError) throw familiesError
    if (!families || families.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ–º–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    }
    
    const familyId = families[0].id
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º—å—é #${familyId}: ${families[0].name}\n`)
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const initialProductsCount = await getProductsCount(familyId)
    console.log(`üì¶ –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${initialProductsCount}\n`)
    
    // ===== –¢–ï–°–¢ 1: –¢–æ–≤–∞—Ä —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∫—É–ø–∫–∏ =====
    console.log('üî¨ –¢–ï–°–¢ 1: –¢–æ–≤–∞—Ä —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∫—É–ø–∫–∏')
    console.log('‚îÄ'.repeat(60))
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫ #1
    const testDate1 = new Date().toISOString().split('T')[0]
    const { data: receipt1, error: receipt1Error } = await supabase
      .from('receipts')
      .insert({
        family_id: familyId,
        date: testDate1,
        items_count: 1,
        total_amount: 99.99,
        status: 'processed'
      })
      .select()
      .single()
    
    if (receipt1Error) throw receipt1Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫ #${receipt1.id}`)
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    const uniqueProductName = `TEST_UNIQUE_${Date.now()}`
    const { data: uniqueProduct, error: uniqueProductError } = await supabase
      .from('products')
      .insert({
        family_id: familyId,
        name: uniqueProductName,
        calories: 100,
        price: 99.99,
        purchase_count: 1,
        status: 'calculating'
      })
      .select()
      .single()
    
    if (uniqueProductError) throw uniqueProductError
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä #${uniqueProduct.id}: ${uniqueProductName}`)
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–∫–∏
    const { error: history1Error } = await supabase
      .from('product_history')
      .insert({
        product_id: uniqueProduct.id,
        family_id: familyId,
        date: testDate1,
        quantity: 1,
        price: 99.99,
        unit_price: 99.99,
        receipt_id: receipt1.id
      })
    
    if (history1Error) throw history1Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #${uniqueProduct.id}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let product = await getProductByName(familyId, uniqueProductName)
    console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${product ? '–î–ê' : '–ù–ï–¢'}`)
    
    // –£–¥–∞–ª—è–µ–º —á–µ–∫
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —á–µ–∫ #${receipt1.id}...`)
    const { error: deleteError1 } = await supabase
      .from('receipts')
      .delete()
      .eq('id', receipt1.id)
    
    if (deleteError1) throw deleteError1
    console.log('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω')
    
    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await sleep(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω
    product = await getProductByName(familyId, uniqueProductName)
    if (product) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–≤–∞—Ä –ù–ï —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!')
    } else {
      console.log('‚úÖ –£–°–ü–ï–•: –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫)')
    }
    
    console.log('\n' + '‚îÄ'.repeat(60) + '\n')
    
    // ===== –¢–ï–°–¢ 2: –¢–æ–≤–∞—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ =====
    console.log('üî¨ –¢–ï–°–¢ 2: –¢–æ–≤–∞—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏')
    console.log('‚îÄ'.repeat(60))
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    const sharedProductName = `TEST_SHARED_${Date.now()}`
    const { data: sharedProduct, error: sharedProductError } = await supabase
      .from('products')
      .insert({
        family_id: familyId,
        name: sharedProductName,
        calories: 200,
        price: 50.00,
        purchase_count: 2,
        status: 'calculating'
      })
      .select()
      .single()
    
    if (sharedProductError) throw sharedProductError
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä #${sharedProduct.id}: ${sharedProductName}`)
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫ #2
    const { data: receipt2, error: receipt2Error } = await supabase
      .from('receipts')
      .insert({
        family_id: familyId,
        date: testDate1,
        items_count: 1,
        total_amount: 50.00,
        status: 'processed'
      })
      .select()
      .single()
    
    if (receipt2Error) throw receipt2Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫ #${receipt2.id}`)
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫ #3
    const { data: receipt3, error: receipt3Error } = await supabase
      .from('receipts')
      .insert({
        family_id: familyId,
        date: testDate1,
        items_count: 1,
        total_amount: 50.00,
        status: 'processed'
      })
      .select()
      .single()
    
    if (receipt3Error) throw receipt3Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫ #${receipt3.id}`)
    
    // –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
    const { error: history2Error } = await supabase
      .from('product_history')
      .insert([
        {
          product_id: sharedProduct.id,
          family_id: familyId,
          date: testDate1,
          quantity: 1,
          price: 50.00,
          unit_price: 50.00,
          receipt_id: receipt2.id
        },
        {
          product_id: sharedProduct.id,
          family_id: familyId,
          date: testDate1,
          quantity: 1,
          price: 50.00,
          unit_price: 50.00,
          receipt_id: receipt3.id
        }
      ])
    
    if (history2Error) throw history2Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ 2 –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #${sharedProduct.id}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    let history = await getProductHistory(sharedProduct.id)
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${history.length}`)
    
    // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —á–µ–∫
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —á–µ–∫ #${receipt2.id}...`)
    const { error: deleteError2 } = await supabase
      .from('receipts')
      .delete()
      .eq('id', receipt2.id)
    
    if (deleteError2) throw deleteError2
    console.log('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω')
    
    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await sleep(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –ù–ï —É–¥–∞–ª–µ–Ω
    product = await getProductByName(familyId, sharedProductName)
    if (!product) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω, —Ö–æ—Ç—è –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–µ–∫–∞!')
    } else {
      console.log('‚úÖ –£–°–ü–ï–•: –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–µ–∫–∞)')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = await getProductHistory(sharedProduct.id)
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${history.length}`)
    
    if (history.length === 1) {
      console.log('‚úÖ –£–°–ü–ï–•: –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } else {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–æ–∂–∏–¥–∞–ª–æ—Å—å 1, –ø–æ–ª—É—á–µ–Ω–æ ${history.length})`)
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —á–µ–∫
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —á–µ–∫ #${receipt3.id}...`)
    const { error: deleteError3 } = await supabase
      .from('receipts')
      .delete()
      .eq('id', receipt3.id)
    
    if (deleteError3) throw deleteError3
    console.log('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω')
    
    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await sleep(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω
    product = await getProductByName(familyId, sharedProductName)
    if (product) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–≤–∞—Ä –ù–ï —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–æ–≤!')
    } else {
      console.log('‚úÖ –£–°–ü–ï–•: –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–æ–≤')
    }
    
    console.log('\n' + '‚îÄ'.repeat(60) + '\n')
    
    // ===== –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
    console.log('üî¨ –¢–ï–°–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    console.log('‚îÄ'.repeat(60))
    
    const today = new Date()
    const year = today.getFullYear()
    const month = String(today.getMonth() + 1).padStart(2, '0')
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ
    const statsBefore = await getMonthlyStats(familyId, month, year)
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ: —Ç—Ä–∞—Ç—ã = ${statsBefore?.total_spent || 0}, —á–µ–∫–æ–≤ = ${statsBefore?.receipts_count || 0}`)
    
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫
    const { data: receipt4, error: receipt4Error } = await supabase
      .from('receipts')
      .insert({
        family_id: familyId,
        date: today.toISOString().split('T')[0],
        items_count: 1,
        total_amount: 123.45,
        status: 'processed'
      })
      .select()
      .single()
    
    if (receipt4Error) throw receipt4Error
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫ #${receipt4.id} –Ω–∞ —Å—É–º–º—É 123.45`)
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    await sleep(2000)
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const statsAfterCreate = await getMonthlyStats(familyId, month, year)
    const expectedSpentAfterCreate = (statsBefore?.total_spent || 0) + 123.45
    const expectedCountAfterCreate = (statsBefore?.receipts_count || 0) + 1
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: —Ç—Ä–∞—Ç—ã = ${statsAfterCreate?.total_spent || 0}, —á–µ–∫–æ–≤ = ${statsAfterCreate?.receipts_count || 0}`)
    
    // –£–¥–∞–ª—è–µ–º —á–µ–∫
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —á–µ–∫ #${receipt4.id}...`)
    const { error: deleteError4 } = await supabase
      .from('receipts')
      .delete()
      .eq('id', receipt4.id)
    
    if (deleteError4) throw deleteError4
    console.log('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω')
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    await sleep(2000)
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const statsAfterDelete = await getMonthlyStats(familyId, month, year)
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: —Ç—Ä–∞—Ç—ã = ${statsAfterDelete?.total_spent || 0}, —á–µ–∫–æ–≤ = ${statsAfterDelete?.receipts_count || 0}`)
    
    const spentMatch = Math.abs((statsAfterDelete?.total_spent || 0) - (statsBefore?.total_spent || 0)) < 0.01
    const countMatch = (statsAfterDelete?.receipts_count || 0) === (statsBefore?.receipts_count || 0)
    
    if (spentMatch && countMatch) {
      console.log('‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º–æ–π')
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: —Ç—Ä–∞—Ç—ã = ${statsBefore?.total_spent || 0}, —á–µ–∫–æ–≤ = ${statsBefore?.receipts_count || 0}`)
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: —Ç—Ä–∞—Ç—ã = ${statsAfterDelete?.total_spent || 0}, —á–µ–∫–æ–≤ = ${statsAfterDelete?.receipts_count || 0}`)
    }
    
    console.log('\n' + '‚îÄ'.repeat(60) + '\n')
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const finalProductsCount = await getProductsCount(familyId)
    console.log(`\nüì¶ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${finalProductsCount}`)
    console.log(`üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${finalProductsCount - initialProductsCount} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0)`)
    
    if (finalProductsCount === initialProductsCount) {
      console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!\n')
    } else {
      console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤\n')
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error)
    console.error(error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest()

