import { useState, useRef, useEffect } from 'react';
import { Camera, ShoppingCart, Home, BarChart3, Clock, AlertCircle, CheckCircle, Edit2, Save, X, Upload, Loader2, XCircle, Trash2, ChevronLeft, ChevronRight, Eye, Calendar, RefreshCw, AlertTriangle, Info, Sparkles } from 'lucide-react';
import { useProducts, useReceipts, useProductHistory, useMonthlyStats } from './hooks/useSupabaseData';
import { SupabaseService } from './services/supabaseService';
import type { ProductHistory, Product } from './lib/supabase';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log('üîç Environment check:', {
  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
  VITE_PERPLEXITY_API_KEY: import.meta.env.VITE_PERPLEXITY_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
});

const GroceryTrackerApp = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
  if (!import.meta.env.VITE_SUPABASE_URL || !import.meta.env.VITE_SUPABASE_ANON_KEY) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="text-red-500 mx-auto mb-4" size={64} />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>
          <p className="text-gray-600 mb-4">
            –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local
          </p>
          <button
            onClick={() => window.location.reload()}
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors"
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    );
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'home' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [activeTab, setActiveTab] = useState(() => {
    const savedTab = localStorage.getItem('activeTab');
    return savedTab || 'home';
  });
  const [selectedFamilyId] = useState<number>(1);
  const [selectedMonth, setSelectedMonth] = useState<{month: string, year: number} | null>(null);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('activeTab', activeTab);
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É:', activeTab);
  }, [activeTab]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
  const getCurrentMonth = () => {
    const now = new Date();
    return {
      month: String(now.getMonth() + 1).padStart(2, '0'),
      year: now.getFullYear()
    };
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  let products, productsLoading, updateProduct, deleteProduct, loadMoreProducts, loadingMoreProducts, hasMoreProducts, receipts, receiptsLoading, deleteReceipt, loadMoreReceipts, loadingMoreReceipts, hasMoreReceipts, monthlyStatsData, statsLoading, recalculateStats, recalculateAllAnalytics, statsError, refetchStats;
  
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫–∏ Supabase...');
    
    const productsHook = useProducts(selectedFamilyId);
    products = productsHook.products;
    productsLoading = productsHook.loading;
    updateProduct = productsHook.updateProduct;
    deleteProduct = productsHook.deleteProduct;
    loadMoreProducts = productsHook.loadMore;
    loadingMoreProducts = productsHook.loadingMore;
    hasMoreProducts = productsHook.hasMore;
    
    const receiptsHook = useReceipts(selectedFamilyId);
    receipts = receiptsHook.receipts;
    receiptsLoading = receiptsHook.loading;
    deleteReceipt = receiptsHook.deleteReceipt;
    loadMoreReceipts = receiptsHook.loadMore;
    loadingMoreReceipts = receiptsHook.loadingMore;
    hasMoreReceipts = receiptsHook.hasMore;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const currentMonth = selectedMonth || getCurrentMonth();
    const statsHook = useMonthlyStats(selectedFamilyId, currentMonth.month, currentMonth.year);
    monthlyStatsData = statsHook.stats;
    statsLoading = statsHook.loading;
    recalculateStats = statsHook.recalculateStats;
    recalculateAllAnalytics = statsHook.recalculateAllAnalytics;
    statsError = statsHook.error;
    refetchStats = statsHook.refetch;
    
    console.log('‚úÖ –•—É–∫–∏ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—É–∫–æ–≤ Supabase:', error);
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="text-red-500 mx-auto mb-4" size={64} />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
          <p className="text-gray-600 mb-4">
            –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          </p>
          <button
            onClick={() => window.location.reload()}
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors"
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    );
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pending receipts –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    console.log('üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    const unsubscribe = SupabaseService.subscribeToPendingReceipts(
      selectedFamilyId,
      (receipt) => {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞:', receipt.status);
        
        // –ö–æ–≥–¥–∞ —á–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (receipt.status === 'completed') {
          console.log('‚úÖ –ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
          refetchStats();
        }
      }
    );

    return () => {
      console.log('üîï –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ–∫–æ–≤');
      unsubscribe();
    };
  }, [selectedFamilyId, refetchStats]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  const currentMonth = selectedMonth || getCurrentMonth();

  const goToPreviousMonth = () => {
    const date = new Date(currentMonth.year, parseInt(currentMonth.month) - 1, 1);
    date.setMonth(date.getMonth() - 1);
    
    setSelectedMonth({
      month: String(date.getMonth() + 1).padStart(2, '0'),
      year: date.getFullYear()
    });
  };

  const goToNextMonth = () => {
    const date = new Date(currentMonth.year, parseInt(currentMonth.month) - 1, 1);
    date.setMonth(date.getMonth() + 1);
    
    setSelectedMonth({
      month: String(date.getMonth() + 1).padStart(2, '0'),
      year: date.getFullYear()
    });
  };


  const isCurrentMonth = () => {
    if (!selectedMonth) return true;
    const current = getCurrentMonth();
    return selectedMonth.month === current.month && selectedMonth.year === current.year;
  };

  const canGoToNextMonth = () => {
    return !isCurrentMonth();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–æ–≤
  const handleTouchStart = (e: React.TouchEvent) => {
    const touch = e.touches[0];
    const startX = touch.clientX;
    const startY = touch.clientY;
    
    const handleTouchEnd = (e: TouchEvent) => {
      const touch = e.changedTouches[0];
      const endX = touch.clientX;
      const endY = touch.clientY;
      
      const deltaX = endX - startX;
      const deltaY = endY - startY;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø (–Ω–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        if (deltaX > 0) {
          // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
          goToPreviousMonth();
        } else {
          // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
          if (canGoToNextMonth()) {
            goToNextMonth();
          }
        }
      }
      
      document.removeEventListener('touchend', handleTouchEnd);
    };
    
    document.addEventListener('touchend', handleTouchEnd);
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UI
  const processedProducts = products.map(product => ({
    id: product.id,
    name: product.name,
    originalName: product.original_name,
    lastPurchase: product.last_purchase,
    avgDays: product.avg_days,
    predictedEnd: product.predicted_end,
    status: product.status,
    calories: product.calories,
    price: product.price,
    purchaseCount: product.purchase_count
  }));

  const processedReceipts = receipts.map(receipt => ({
    id: receipt.id,
    date: receipt.date,
    items: receipt.items_count,
    total: receipt.total_amount,
    status: receipt.status
  }));

  // –§–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ –≤ –±–∞–∑–µ: 'YYYY-MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä '2024-12')
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º currentMonth –≤ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const targetMonthKey = `${currentMonth.year}-${currentMonth.month.padStart(2, '0')}`;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', {
    targetMonthKey,
    currentMonth,
    availableStats: monthlyStatsData.map(s => ({ month: s.month, year: s.year, spent: s.total_spent }))
  });
  
  const selectedStats = monthlyStatsData.find(stat => {
    // stat.month –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'MM'
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (stat.month.includes('-')) {
      // –§–æ—Ä–º–∞—Ç 'YYYY-MM'
      const matches = stat.month === targetMonthKey;
      if (matches) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { month: stat.month, year: stat.year, spent: stat.total_spent });
      }
      return matches;
    } else {
      // –§–æ—Ä–º–∞—Ç 'MM' - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
      const matches = stat.month === currentMonth.month && stat.year === currentMonth.year;
      if (matches) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):', { month: stat.month, year: stat.year, spent: stat.total_spent });
      }
      return matches;
    }
  }) || null;
  
  if (!selectedStats && monthlyStatsData.length > 0) {
    console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã');
  } else if (!selectedStats) {
    console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã');
  }
  
  const monthlyStats = selectedStats ? {
    totalSpent: selectedStats.total_spent,
    totalCalories: selectedStats.total_calories,
    avgCaloriesPerDay: selectedStats.avg_calories_per_day,
    receiptsCount: selectedStats.receipts_count,
    trends: {
      spending: 12, // % –∏–∑–º–µ–Ω–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      calories: -8,
      receipts: 5
    },
    highlights: [
      { text: '–ö—É–ø–∏–ª–∏ –Ω–∞ 45% –±–æ–ª—å—à–µ –º–æ–ª–æ–∫–∞', trend: 'up', product: '–ú–æ–ª–æ–∫–æ 2L' },
      { text: '–•–ª–µ–±–∞ –Ω–∞ 22% –º–µ–Ω—å—à–µ —á–µ–º –æ–±—ã—á–Ω–æ', trend: 'down', product: '–•–ª–µ–± –±–µ–ª—ã–π' },
      { text: '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: –¢–≤–æ—Ä–æ–≥ 500–≥', trend: 'new', product: '–¢–≤–æ—Ä–æ–≥ 500–≥' }
    ]
  } : {
    totalSpent: 0,
    totalCalories: 0,
    avgCaloriesPerDay: 0,
    receiptsCount: 0,
    trends: { spending: 0, calories: 0, receipts: 0 },
    highlights: []
  };

  const StatusBadge = ({ status }: { status: string }) => {
    if (status === 'ending-soon') {
      return (
        <div className="flex items-center gap-1 text-orange-600 bg-orange-50 px-2 py-1 rounded text-xs">
          <AlertCircle size={12} />
          <span>–°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è</span>
        </div>
      );
    }
    if (status === 'calculating') {
      return (
        <div className="flex items-center gap-1 text-blue-600 bg-blue-50 px-2 py-1 rounded text-xs">
          <Clock size={12} />
          <span>Calculating...</span>
        </div>
      );
    }
    return (
      <div className="flex items-center gap-1 text-green-600 bg-green-50 px-2 py-1 rounded text-xs">
        <CheckCircle size={12} />
        <span>–í –Ω–∞–ª–∏—á–∏–∏</span>
      </div>
    );
  };

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const HomePage = () => {
    const [deleteConfirmProductId, setDeleteConfirmProductId] = useState<number | null>(null);
    const [deletingProductId, setDeletingProductId] = useState<number | null>(null);

    const handleDeleteProduct = async (productId: number) => {
      try {
        setDeletingProductId(productId);
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä #' + productId);
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await deleteProduct(productId);
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î');
        setDeleteConfirmProductId(null);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...');
        await recalculateAllAnalytics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        await refetchStats();
        
        console.log('‚úÖ –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      } finally {
        setDeletingProductId(null);
      }
    };

    return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü */}
      <div 
        className="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl p-6 text-white"
        onTouchStart={handleTouchStart}
      >
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º */}
        <div className="flex items-center justify-center space-x-4 mb-4">
          <button
            onClick={goToPreviousMonth}
            className="p-2.5 rounded-lg bg-white/20 hover:bg-white/30 transition-colors"
            title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
          >
            <ChevronLeft className="w-6 h-6" />
          </button>
          
          <h2 className="text-xl font-bold px-4">
            {(() => {
              const monthStr = currentMonth.month.includes('-') 
                ? currentMonth.month.split('-')[1] 
                : currentMonth.month;
              const monthName = new Date(currentMonth.year, parseInt(monthStr) - 1).toLocaleString('ru', { month: 'long' });
              return `${monthName} ${currentMonth.year}`;
            })()}
          </h2>
          
          <button
            onClick={goToNextMonth}
            disabled={!canGoToNextMonth()}
            className={`p-2.5 rounded-lg transition-colors ${
              canGoToNextMonth()
                ? 'bg-white/20 hover:bg-white/30'
                : 'bg-white/10 text-white/50 cursor-not-allowed'
            }`}
            title={canGoToNextMonth() ? "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü" : "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –±—É–¥—É—â–µ–µ"}
          >
            <ChevronRight className="w-6 h-6" />
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <div className="mb-4">
          <button
            onClick={async () => {
              try {
                await recalculateStats();
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
              }
            }}
            disabled={statsLoading}
            className={`w-full py-2 rounded-lg text-sm font-medium transition-colors ${
              statsLoading 
                ? 'bg-white/10 text-white/50 cursor-not-allowed' 
                : 'bg-white/20 hover:bg-white/30 active:bg-white/40'
            }`}
            title="–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
          >
            {statsLoading ? (
              <span className="flex items-center justify-center gap-2">
                <Loader2 className="animate-spin" size={16} />
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
              </span>
            ) : (
              <span className="flex items-center justify-center gap-2">
                <RefreshCw size={16} />
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              </span>
            )}
          </button>
        </div>
        {statsError && (
          <div className="bg-red-100 border border-red-300 rounded-lg p-3 mb-4">
            <div className="text-red-800 text-sm">
              <strong>–û—à–∏–±–∫–∞:</strong> {statsError}
            </div>
          </div>
        )}
        {statsLoading ? (
          <div className="text-center py-4">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
        ) : (
          <div className="grid grid-cols-2 gap-4">
            <div>
              <div className="text-sm opacity-90">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
              <div className="text-2xl font-bold">‚Ç¨{monthlyStats.totalSpent.toFixed(2)}</div>
            </div>
            <div>
              <div className="text-sm opacity-90">–ö–∞–ª–æ—Ä–∏–π</div>
              <div className="text-2xl font-bold">{(monthlyStats.totalCalories / 1000).toFixed(0)}k</div>
            </div>
            <div>
              <div className="text-sm opacity-90">–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å</div>
              <div className="text-xl font-semibold">{monthlyStats.avgCaloriesPerDay} –∫–∫–∞–ª</div>
            </div>
            <div>
              <div className="text-sm opacity-90">–ß–µ–∫–æ–≤</div>
              <div className="text-xl font-semibold">{monthlyStats.receiptsCount}</div>
            </div>
          </div>
        )}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ */}
      <div>
        <h3 className="text-lg font-semibold mb-3">–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</h3>
        <div className="space-y-3">
          {productsLoading ? (
            <div className="text-center py-8 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</div>
          ) : (
            processedProducts.map(product => (
              <div key={product.id} className="bg-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-shadow">
                {deleteConfirmProductId === product.id ? (
                  // –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 text-red-600">
                      <AlertCircle size={20} />
                      <span className="font-semibold">–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?</span>
                    </div>
                    <p className="text-sm text-gray-600">
                      –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ –æ "{product.name}" –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã. 
                      –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                    </p>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleDeleteProduct(product.id)}
                        disabled={deletingProductId === product.id}
                        className="flex-1 bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {deletingProductId === product.id ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–î–∞, —É–¥–∞–ª–∏—Ç—å'}
                      </button>
                      <button
                        onClick={() => setDeleteConfirmProductId(null)}
                        disabled={deletingProductId === product.id}
                        className="flex-1 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors disabled:opacity-50"
                      >
                        –û—Ç–º–µ–Ω–∞
                      </button>
                    </div>
                  </div>
                ) : (
                  // –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
                  <>
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <h4 className="font-semibold text-gray-900">{product.name}</h4>
                        {product.originalName && (
                          <div className="text-xs text-gray-400 mt-0.5">{product.originalName}</div>
                        )}
                        <div className="text-sm text-gray-500 mt-1">
                          –ö—É–ø–ª–µ–Ω–æ {product.purchaseCount} —Ä–∞–∑
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <StatusBadge status={product.status} />
                        <button
                          onClick={() => setDeleteConfirmProductId(product.id)}
                          className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                          title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 mt-3 text-xs text-gray-600">
                      <div>
                        <div className="text-gray-400">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞</div>
                        <div className="font-medium">{product.lastPurchase ? new Date(product.lastPurchase).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                      </div>
                      {product.avgDays ? (
                        <>
                          <div>
                            <div className="text-gray-400">–ß–∞—Å—Ç–æ—Ç–∞</div>
                            <div className="font-medium">{product.avgDays} –¥–Ω–µ–π</div>
                          </div>
                          <div>
                            <div className="text-gray-400">–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è</div>
                            <div className="font-medium">{product.predictedEnd ? new Date(product.predictedEnd).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                          </div>
                        </>
                      ) : (
                        <div className="col-span-2 flex items-center text-blue-600">
                          <Clock size={14} className="mr-1" />
                          –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                        </div>
                      )}
                    </div>

                    <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-100">
                      <div className="text-sm text-gray-600">{product.calories} –∫–∫–∞–ª</div>
                      <div className="text-sm font-semibold text-gray-900">‚Ç¨{product.price.toFixed(2)}</div>
                    </div>
                  </>
                )}
              </div>
            ))
          )}
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" */}
        {!productsLoading && hasMoreProducts && processedProducts.length > 0 && loadMoreProducts && (
          <div className="flex justify-center mt-4">
            <button
              onClick={() => loadMoreProducts(20)}
              disabled={loadingMoreProducts}
              className={`px-6 py-3 rounded-xl font-semibold transition-colors ${
                loadingMoreProducts
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
              }`}
            >
              {loadingMoreProducts ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
            </button>
          </div>
        )}
      </div>
    </div>
    );
  };

  // Receipt Detail Modal Component
  const ReceiptDetailModal = ({ 
    receiptId, 
    onClose, 
    onDateUpdated 
  }: { 
    receiptId: number, 
    onClose: () => void,
    onDateUpdated: () => void 
  }) => {
    const [products, setProducts] = useState<Array<ProductHistory & { product?: Product }>>([]);
    const [loading, setLoading] = useState(true);
    const [editingDate, setEditingDate] = useState(false);
    const [newDate, setNewDate] = useState('');
    const [updating, setUpdating] = useState(false);
    const [receipt, setReceipt] = useState<any>(null);

    useEffect(() => {
      loadReceiptDetails();
    }, [receiptId]);

    const loadReceiptDetails = async () => {
      try {
        setLoading(true);
        
        // Get receipt info
        const receiptData = receipts.find(r => r.id === receiptId);
        setReceipt(receiptData);
        setNewDate(receiptData?.date || '');
        
        // Get products from this receipt
        const receiptProducts = await SupabaseService.getReceiptProducts(receiptId, selectedFamilyId);
        setProducts(receiptProducts);
      } catch (error) {
        console.error('Error loading receipt details:', error);
      } finally {
        setLoading(false);
      }
    };

    const handleUpdateDate = async () => {
      try {
        setUpdating(true);
        await SupabaseService.updateReceiptDate(receiptId, selectedFamilyId, newDate);
        
        // Refresh data
        await loadReceiptDetails();
        onDateUpdated();
        setEditingDate(false);
      } catch (error) {
        console.error('Error updating date:', error);
      } finally {
        setUpdating(false);
      }
    };

    if (loading) {
      return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl p-6 max-w-lg w-full">
            <div className="text-center py-8">
              <Loader2 size={48} className="mx-auto text-indigo-600 mb-4 animate-spin" />
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞...</p>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="sticky top-0 bg-white border-b border-gray-200 p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">–î–µ—Ç–∞–ª–∏ —á–µ–∫–∞</h2>
              <button
                onClick={onClose}
                className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X size={24} />
              </button>
            </div>

            {/* Date Section */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-gray-600">
                  <Calendar size={20} />
                  <span className="font-medium">–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</span>
                </div>
                {!editingDate && (
                  <button
                    onClick={() => setEditingDate(true)}
                    className="p-2 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors"
                    title="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
                  >
                    <Edit2 size={18} />
                  </button>
                )}
              </div>

              {editingDate ? (
                <div className="space-y-2">
                  <input
                    type="date"
                    value={newDate}
                    onChange={(e) => setNewDate(e.target.value)}
                    max={new Date().toISOString().split('T')[0]}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <div className="flex gap-2">
                    <button
                      onClick={handleUpdateDate}
                      disabled={updating || !newDate || newDate === receipt?.date}
                      className="flex-1 bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {updating ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                    </button>
                    <button
                      onClick={() => {
                        setEditingDate(false);
                        setNewDate(receipt?.date || '');
                      }}
                      disabled={updating}
                      className="flex-1 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 flex items-center gap-1">
                    <Info size={14} className="flex-shrink-0" />
                    –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
                  </p>
                </div>
              ) : (
                <div className="text-lg font-semibold text-gray-900">
                  {receipt ? new Date(receipt.date).toLocaleDateString('ru-RU', { 
                    day: 'numeric', 
                    month: 'long', 
                    year: 'numeric' 
                  }) : '‚Äî'}
                </div>
              )}
            </div>

            {/* Receipt Summary */}
            <div className="mt-4 grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
              <div>
                <div className="text-sm text-gray-500">–¢–æ–≤–∞—Ä–æ–≤</div>
                <div className="text-xl font-bold text-gray-900">{products.length}</div>
              </div>
              <div>
                <div className="text-sm text-gray-500">–°—É–º–º–∞</div>
                <div className="text-xl font-bold text-indigo-600">
                  ‚Ç¨{receipt?.total_amount?.toFixed(2) || '0.00'}
                </div>
              </div>
            </div>
          </div>

          {/* Products List */}
          <div className="p-6 space-y-3">
            <h3 className="font-semibold text-gray-900 mb-4">–ü—Ä–æ–¥—É–∫—Ç—ã –≤ —á–µ–∫–µ:</h3>
            {products.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <ShoppingCart size={48} className="mx-auto mb-3 opacity-50" />
                <p>–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —á–µ–∫–µ</p>
              </div>
            ) : (
              products.map((item, index) => (
                <div 
                  key={index} 
                  className="bg-gray-50 rounded-lg p-4 border border-gray-200"
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">
                        {item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}
                      </h4>
                      {item.product?.original_name && (
                        <div className="text-xs text-gray-400 mt-0.5">
                          {item.product.original_name}
                        </div>
                      )}
                    </div>
                    <div className="text-lg font-bold text-indigo-600">
                      ‚Ç¨{item.price.toFixed(2)}
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-3 mt-3 text-sm">
                    <div>
                      <div className="text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</div>
                      <div className="font-medium text-gray-900">{item.quantity}</div>
                    </div>
                    <div>
                      <div className="text-gray-500">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</div>
                      <div className="font-medium text-gray-900">‚Ç¨{item.unit_price.toFixed(2)}</div>
                    </div>
                    <div>
                      <div className="text-gray-500">–ö–∞–ª–æ—Ä–∏–∏</div>
                      <div className="font-medium text-gray-900">
                        {item.product?.calories || 0} –∫–∫–∞–ª
                      </div>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    );
  };

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
  const UploadPage = () => {
    const [isProcessing, setIsProcessing] = useState(false);
    const [uploadError, setUploadError] = useState<string | null>(null);
    const [uploadErrorClosing, setUploadErrorClosing] = useState(false);
    const [uploadSuccess, setUploadSuccess] = useState(false);
    const [uploadSuccessClosing, setUploadSuccessClosing] = useState(false);
    const [deletingReceiptId, setDeletingReceiptId] = useState<number | null>(null);
    const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);
    const [selectedReceiptId, setSelectedReceiptId] = useState<number | null>(null);
    const [pendingReceipts, setPendingReceipts] = useState<any[]>([]);
    const [completedReceiptTimers, setCompletedReceiptTimers] = useState<Record<number, number>>({});
    const [receiptStatusAnimations, setReceiptStatusAnimations] = useState<Record<number, string>>({});
    const [previousReceiptStatuses, setPreviousReceiptStatuses] = useState<Record<number, string>>({});
    const cameraInputRef = useRef<HTMLInputElement>(null);
    const galleryInputRef = useRef<HTMLInputElement>(null);
    const autoCloseTimersRef = useRef<Record<number, number>>({});
    const lastVisibleTimeRef = useRef<number>(Date.now());

    // Handle page visibility for PWA (pause/resume timers when app goes to background)
    useEffect(() => {
      const handleVisibilityChange = () => {
        if (document.hidden) {
          // App went to background
          console.log('üì± PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω');
          lastVisibleTimeRef.current = Date.now();
        } else {
          // App came back to foreground
          console.log('üì± PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω');
          const timeInBackground = Date.now() - lastVisibleTimeRef.current;
          console.log(`‚è±Ô∏è PWA: –í—Ä–µ–º—è –≤ —Ñ–æ–Ω–µ: ${timeInBackground}ms`);
          
          // Immediately check for updates when app comes back
          loadPendingReceipts().then((receipts) => {
            if (receipts) {
              const completedReceipts = receipts.filter((r: any) => r.status === 'completed');
              if (completedReceipts.length > 0) {
                console.log('‚úÖ PWA: –ù–∞–π–¥–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–µ–∫–∏ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞');
                refetchStats();
              }
            }
          });
        }
      };

      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      return () => {
        document.removeEventListener('visibilitychange', handleVisibilityChange);
      };
    }, []);

    // Load pending receipts and poll for updates
    // Note: Realtime is disabled because it's not available in the current Supabase plan
    useEffect(() => {
      console.log('üîÑ UploadPage: –ó–∞–≥—Ä—É–∂–∞–µ–º pending receipts –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling');
      loadPendingReceipts();
      
      // Store previous receipts to detect changes
      let previousReceipts: any[] = [];
      
      // Polling: check pending receipts every 1 second for responsive updates
      // This ensures updates work without Realtime and works well in PWA
      console.log('‚è≤Ô∏è UploadPage: –ó–∞–ø—É—Å–∫–∞–µ–º polling (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)');
      const pollingInterval = setInterval(async () => {
        // Skip polling if page is not visible (PWA in background)
        if (document.hidden) {
          return;
        }
        
        console.log('üîÑ Polling: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å pending receipts');
        const receipts = await loadPendingReceipts();
        
        if (!receipts || receipts.length === 0) {
          previousReceipts = [];
          return;
        }
        
        // Detect status changes and trigger animations
        receipts.forEach((receipt: any) => {
          const prevReceipt = previousReceipts.find((prev: any) => prev.id === receipt.id);
          if (prevReceipt && prevReceipt.status !== receipt.status) {
            console.log(`üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è —á–µ–∫–∞ ${receipt.id}: ${prevReceipt.status} ‚Üí ${receipt.status}`);
            // Trigger flip animation on status change
            setReceiptStatusAnimations(prev => ({
              ...prev,
              [receipt.id]: 'receipt-status-change'
            }));
            // Clear animation class after animation completes
            setTimeout(() => {
              setReceiptStatusAnimations(prev => {
                const newAnims = { ...prev };
                delete newAnims[receipt.id];
                return newAnims;
              });
            }, 600);
          }
        });
        
        // Check if any receipts changed to completed status
        const newlyCompleted = receipts.filter((r: any) => {
          const wasProcessing = previousReceipts.find((prev: any) => 
            prev.id === r.id && prev.status === 'processing'
          );
          return r.status === 'completed' && wasProcessing;
        });
        
        if (newlyCompleted.length > 0) {
          console.log('‚úÖ Polling: –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–µ–∫–∏:', newlyCompleted.map((r: any) => r.id));
          refetchStats();
        }
        
        previousReceipts = receipts;
      }, 1000); // Poll every 1 second for responsive updates

      return () => {
        console.log('üîï UploadPage: –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling');
        clearInterval(pollingInterval);
      };
    }, [selectedFamilyId]);

    // Auto-close completed receipts after 3 seconds with countdown
    // Enhanced for PWA: uses timestamp tracking instead of just timers
    useEffect(() => {
      const AUTO_CLOSE_DELAY = 3000; // 3 seconds
      const countdownIntervals: NodeJS.Timeout[] = [];

      // Process each completed receipt
      pendingReceipts.forEach((receipt) => {
        if (receipt.status === 'completed') {
          // Initialize start time if not exists
          if (!autoCloseTimersRef.current[receipt.id]) {
            console.log('‚è±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —á–µ–∫–∞:', receipt.id);
            autoCloseTimersRef.current[receipt.id] = Date.now();
            
            // Set initial countdown
            setCompletedReceiptTimers(prev => ({
              ...prev,
              [receipt.id]: 3
            }));
          }

          // Calculate remaining time
          const startTime = autoCloseTimersRef.current[receipt.id];
          const elapsed = Date.now() - startTime;
          const remaining = Math.max(0, AUTO_CLOSE_DELAY - elapsed);
          const remainingSeconds = Math.ceil(remaining / 1000);

          // Update countdown display
          if (remainingSeconds > 0 && !completedReceiptTimers[receipt.id]) {
            setCompletedReceiptTimers(prev => ({
              ...prev,
              [receipt.id]: remainingSeconds
            }));
          }

          // Auto-delete if time has passed
          if (remaining <= 0) {
            console.log('üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á–µ–∫:', receipt.id);
            handleAutoDeleteReceipt(receipt.id);
          }
        }
      });

      // Update countdown every second
      const countdownInterval = setInterval(() => {
        // Skip if page is not visible (PWA in background)
        if (document.hidden) {
          return;
        }

        const updates: Record<number, number> = {};
        let hasChanges = false;

        pendingReceipts.forEach((receipt) => {
          if (receipt.status === 'completed' && autoCloseTimersRef.current[receipt.id]) {
            const startTime = autoCloseTimersRef.current[receipt.id];
            const elapsed = Date.now() - startTime;
            const remaining = Math.max(0, AUTO_CLOSE_DELAY - elapsed);
            const remainingSeconds = Math.ceil(remaining / 1000);

            if (remainingSeconds !== completedReceiptTimers[receipt.id]) {
              updates[receipt.id] = remainingSeconds;
              hasChanges = true;
            }

            // Auto-delete if time has passed
            if (remaining <= 0) {
              console.log('üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á–µ–∫:', receipt.id);
              handleAutoDeleteReceipt(receipt.id);
            }
          }
        });

        if (hasChanges) {
          setCompletedReceiptTimers(prev => ({ ...prev, ...updates }));
        }
      }, 100); // Check every 100ms for smoother countdown in PWA

      countdownIntervals.push(countdownInterval);

      // Cleanup
      return () => {
        countdownIntervals.forEach(interval => clearInterval(interval));
      };
    }, [pendingReceipts, completedReceiptTimers]);

    // Helper function to handle auto-deletion
    const handleAutoDeleteReceipt = async (receiptId: number) => {
      try {
        // Clean up timer reference
        delete autoCloseTimersRef.current[receiptId];
        
        // Remove from countdown display
        setCompletedReceiptTimers(prev => {
          const newTimers = { ...prev };
          delete newTimers[receiptId];
          return newTimers;
        });

        await SupabaseService.deletePendingReceipt(receiptId);
        console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        
        loadPendingReceipts();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞');
        refetchStats();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:', error);
      }
    };

    const loadPendingReceipts = async () => {
      try {
        const receipts = await SupabaseService.getPendingReceipts(selectedFamilyId);
        setPendingReceipts(receipts);
        return receipts;
      } catch (error) {
        console.error('Error loading pending receipts:', error);
        return [];
      }
    };

    const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      // Validate file type
      if (!file.type.startsWith('image/')) {
        setUploadError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setUploadError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
        return;
      }

      setIsProcessing(true);
      setUploadError(null);
      setUploadSuccess(false);

      try {
        // Upload image and create pending receipt (FAST - user can close app)
        console.log('üì§ Uploading receipt for background processing...');
        const pendingReceipt = await SupabaseService.uploadReceiptForProcessing(
          selectedFamilyId,
          file
        );

        console.log('‚úÖ Receipt uploaded, triggering background processing...');
        
        // Trigger background processing (fire and forget)
        await SupabaseService.triggerReceiptProcessing(pendingReceipt.id);
        
        setUploadSuccess(true);
        setUploadSuccessClosing(false);
        
        // Load pending receipts to show the new one
        await loadPendingReceipts();
        
        // Show success message with smooth closing animation
        // Start closing animation 500ms before hiding
        setTimeout(() => {
          setUploadSuccessClosing(true);
        }, 2500);
        
        // Hide message after animation completes
        setTimeout(() => {
          setUploadSuccess(false);
          setUploadSuccessClosing(false);
        }, 3000);

      } catch (error) {
        console.error('Error uploading receipt:', error);
        setUploadError(
          error instanceof Error 
            ? `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: ${error.message}` 
            : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
      } finally {
        setIsProcessing(false);
        // Reset file inputs
        if (cameraInputRef.current) {
          cameraInputRef.current.value = '';
        }
        if (galleryInputRef.current) {
          galleryInputRef.current.value = '';
        }
      }
    };

    const triggerCameraInput = () => {
      cameraInputRef.current?.click();
    };

    const triggerGalleryInput = () => {
      galleryInputRef.current?.click();
    };

    const handleDeleteReceipt = async (receiptId: number) => {
      try {
        setDeletingReceiptId(receiptId);
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–µ–∫ #' + receiptId);
        
        // –£–¥–∞–ª—è–µ–º —á–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await deleteReceipt(receiptId);
        
        console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î');
        setDeleteConfirmId(null);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...');
        await recalculateAllAnalytics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        await refetchStats();
        
        console.log('‚úÖ –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:', error);
        setUploadError(
          error instanceof Error 
            ? `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞: ${error.message}` 
            : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
      } finally {
        setDeletingReceiptId(null);
      }
    };

    const handleDateUpdated = async () => {
      // Reload receipts and stats after date update
      await refetchStats();
      // The receipts will be automatically refreshed by the hook
    };

    return (
      <div className="space-y-6">
        {/* Receipt Detail Modal */}
        {selectedReceiptId && (
          <ReceiptDetailModal
            receiptId={selectedReceiptId}
            onClose={() => setSelectedReceiptId(null)}
            onDateUpdated={handleDateUpdated}
          />
        )}

        <h2 className="text-2xl font-bold">–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫</h2>
        
        {/* Success Message */}
        {uploadSuccess && (
          <div className={`bg-green-50 border border-green-200 rounded-xl p-4 transition-all ${
            uploadSuccessClosing ? 'message-fade-out' : 'message-fade-in'
          }`}>
            <div className="flex items-start gap-3">
              <CheckCircle size={24} className="text-green-600 flex-shrink-0 animate-bounce" style={{ animationIterationCount: '2' }} />
              <div className="flex-1">
                <div className="font-semibold text-green-900 mb-1">–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!</div>
                <div className="text-sm text-green-700">
                  –ß–µ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - 
                  –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Pending Receipts Status */}
        {pendingReceipts.length > 0 && (
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 receipt-slide-in">
            <h3 className="font-semibold text-blue-900 mb-3">
              –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —á–µ–∫–∏ ({pendingReceipts.length})
            </h3>
            <div className="space-y-2">
              {pendingReceipts.map((receipt) => (
                <div 
                  key={receipt.id} 
                  className={`bg-white rounded-lg p-3 flex items-center gap-3 transition-all duration-300 ${
                    receiptStatusAnimations[receipt.id] || ''
                  }`}
                  style={{ 
                    transformStyle: 'preserve-3d',
                    backfaceVisibility: 'hidden'
                  }}
                >
                  {receipt.status === 'pending' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-yellow-500 status-pulse"></div>
                      <div className="flex-1">
                        <div className="text-sm text-gray-700">–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...</div>
                        <div className="text-xs text-gray-500">
                          {new Date(receipt.created_at).toLocaleString('ru')}
                        </div>
                      </div>
                    </>
                  )}
                  {receipt.status === 'processing' && (
                    <>
                      <Loader2 size={16} className="text-blue-600 animate-spin" />
                      <div className="flex-1">
                        <div className="text-sm text-gray-700 font-medium">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...</div>
                        <div className="text-xs text-gray-500">
                          {new Date(receipt.created_at).toLocaleString('ru')}
                        </div>
                      </div>
                    </>
                  )}
                  {receipt.status === 'completed' && (
                    <>
                      <CheckCircle size={16} className="text-green-600 animate-bounce" style={{ animationIterationCount: '3' }} />
                      <div className="flex-1">
                        <div className="text-sm text-green-700 font-medium">
                          –û–±—Ä–∞–±–æ—Ç–∞–Ω ‚úÖ
                          {completedReceiptTimers[receipt.id] !== undefined && completedReceiptTimers[receipt.id] > 0 && (
                            <span className="ml-2 text-xs text-green-600 font-normal">
                              (–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ {completedReceiptTimers[receipt.id]}—Å)
                            </span>
                          )}
                        </div>
                        <div className="text-xs text-gray-500">
                          {receipt.parsed_data?.items?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          handleAutoDeleteReceipt(receipt.id);
                        }}
                        className="text-gray-400 hover:text-gray-600 transition-colors"
                        title="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                      >
                        <X size={16} />
                      </button>
                    </>
                  )}
                  {receipt.status === 'failed' && (
                    <>
                      <XCircle size={16} className="text-red-600" />
                      <div className="flex-1">
                        <div className="text-sm text-red-700 font-medium">–û—à–∏–±–∫–∞</div>
                        <div className="text-xs text-gray-500">
                          {receipt.error_message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'}
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          delete autoCloseTimersRef.current[receipt.id];
                          SupabaseService.deletePendingReceipt(receipt.id).then(loadPendingReceipts);
                        }}
                        className="text-gray-400 hover:text-gray-600 transition-colors"
                      >
                        <X size={16} />
                      </button>
                    </>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Error Message */}
        {uploadError && (
          <div className={`bg-red-50 border border-red-200 rounded-xl p-4 transition-all ${
            uploadErrorClosing ? 'message-fade-out' : 'message-fade-in'
          }`}>
            <div className="flex items-start gap-3">
              <XCircle size={24} className="text-red-600 flex-shrink-0" />
              <div className="flex-1">
                <div className="font-semibold text-red-900 mb-1">–û—à–∏–±–∫–∞</div>
                <div className="text-sm text-red-700">{uploadError}</div>
              </div>
              <button 
                onClick={() => {
                  setUploadErrorClosing(true);
                  setTimeout(() => {
                    setUploadError(null);
                    setUploadErrorClosing(false);
                  }, 500);
                }}
                className="text-red-400 hover:text-red-600 transition-colors"
              >
                <X size={20} />
              </button>
            </div>
          </div>
        )}

        {/* Upload Area */}
        <div 
          className={`border-2 border-dashed rounded-2xl p-12 text-center transition-all ${
            isProcessing 
              ? 'border-indigo-300 bg-indigo-50 cursor-not-allowed' 
              : 'border-gray-300 bg-gray-50'
          }`}
        >
          {/* Input –¥–ª—è –∫–∞–º–µ—Ä—ã (—Å capture) */}
          <input
            ref={cameraInputRef}
            type="file"
            accept="image/*"
            capture="environment"
            onChange={handleFileSelect}
            className="hidden"
            disabled={isProcessing}
          />
          
          {/* Input –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ (–±–µ–∑ capture) */}
          <input
            ref={galleryInputRef}
            type="file"
            accept="image/*"
            onChange={handleFileSelect}
            className="hidden"
            disabled={isProcessing}
          />
          
          {isProcessing ? (
            <>
              <Loader2 size={48} className="mx-auto text-indigo-600 mb-4 animate-spin" />
              <p className="text-lg font-semibold text-gray-700 mb-2">–ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫...</p>
              <p className="text-sm text-gray-500">–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥</p>
            </>
          ) : (
            <>
              <Camera size={48} className="mx-auto text-gray-400 mb-4" />
              <p className="text-lg font-semibold text-gray-700 mb-2">–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫</p>
              <p className="text-sm text-gray-500 mb-2">–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏</p>
              <p className="text-xs text-indigo-600 font-medium mb-4 flex items-center justify-center gap-1">
                <Sparkles size={14} className="flex-shrink-0" />
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ñ–æ–Ω–µ - –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
              </p>
              <div className="flex gap-3 justify-center">
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    triggerCameraInput();
                  }}
                  className="bg-indigo-600 text-white px-6 py-3 rounded-xl font-semibold hover:bg-indigo-700 transition-colors flex items-center gap-2"
                >
                  <Camera size={20} />
                  –ö–∞–º–µ—Ä–∞
                </button>
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    triggerGalleryInput();
                  }}
                  className="bg-white text-indigo-600 border-2 border-indigo-600 px-6 py-3 rounded-xl font-semibold hover:bg-indigo-50 transition-colors flex items-center gap-2"
                >
                  <Upload size={20} />
                  –ì–∞–ª–µ—Ä–µ—è
                </button>
              </div>
            </>
          )}
        </div>

        {/* Info Box */}
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
          <div className="flex items-start gap-3">
            <AlertCircle size={20} className="text-blue-600 flex-shrink-0 mt-0.5" />
            <div className="text-sm text-blue-800">
              <p className="font-semibold mb-1">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</p>
              <ul className="space-y-1 list-disc list-inside">
                <li>–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ</li>
                <li>AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã, —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</li>
                <li>–ö–∞–ª–æ—Ä–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞</li>
                <li>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Recent Receipts */}
        <div className="mt-8">
          <h3 className="text-lg font-semibold mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏</h3>
          <div className="space-y-3">
            {receiptsLoading ? (
              <div className="text-center py-8 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–æ–≤...</div>
            ) : processedReceipts.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <Camera size={48} className="mx-auto mb-3 opacity-50" />
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤</p>
              </div>
            ) : (
              processedReceipts.map(receipt => (
                <div key={receipt.id} className="bg-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-shadow">
                  {deleteConfirmId === receipt.id ? (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2 text-red-600">
                        <AlertCircle size={20} />
                        <span className="font-semibold">–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫?</span>
                      </div>
                      <p className="text-sm text-gray-600">
                        –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —á–µ–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–¥—Å—á–µ—Ç–æ–≤. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                      </p>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleDeleteReceipt(receipt.id)}
                          disabled={deletingReceiptId === receipt.id}
                          className="flex-1 bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          {deletingReceiptId === receipt.id ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–î–∞, —É–¥–∞–ª–∏—Ç—å'}
                        </button>
                        <button
                          onClick={() => setDeleteConfirmId(null)}
                          disabled={deletingReceiptId === receipt.id}
                          className="flex-1 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors disabled:opacity-50"
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center justify-between">
                      <div 
                        className="flex-1 cursor-pointer"
                        onClick={() => setSelectedReceiptId(receipt.id)}
                      >
                        <div className="font-semibold text-gray-900">{new Date(receipt.date).toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })}</div>
                        <div className="text-sm text-gray-500">{receipt.items} —Ç–æ–≤–∞—Ä–æ–≤</div>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="text-right">
                          <div className="font-bold text-gray-900">‚Ç¨{receipt.total.toFixed(2)}</div>
                          <div className="text-xs text-green-600 flex items-center gap-1">
                            <CheckCircle size={12} />
                            –û–±—Ä–∞–±–æ—Ç–∞–Ω
                          </div>
                        </div>
                        <button
                          onClick={() => setSelectedReceiptId(receipt.id)}
                          className="p-2 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors"
                          title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫"
                        >
                          <Eye size={20} />
                        </button>
                        <button
                          onClick={() => setDeleteConfirmId(receipt.id)}
                          className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                          title="–£–¥–∞–ª–∏—Ç—å —á–µ–∫"
                        >
                          <Trash2 size={20} />
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" */}
          {!receiptsLoading && hasMoreReceipts && processedReceipts.length > 0 && loadMoreReceipts && (
            <div className="flex justify-center mt-4">
              <button
                onClick={() => loadMoreReceipts(20)}
                disabled={loadingMoreReceipts}
                className={`px-6 py-3 rounded-xl font-semibold transition-colors ${
                  loadingMoreReceipts
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-indigo-600 text-white hover:bg-indigo-700'
                }`}
              >
                {loadingMoreReceipts ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
              </button>
            </div>
          )}
        </div>
      </div>
    );
  };

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const AnalyticsPage = () => {
    const [selectedProduct, setSelectedProduct] = useState<number | null>(null);
    const [dateRange, setDateRange] = useState('month'); // week, month, 3months, all
    const [showProductSelect, setShowProductSelect] = useState(false);
    const [chartType, setChartType] = useState('quantity'); // quantity, price

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ Supabase
    const { history: productHistory, loading: historyLoading } = useProductHistory(selectedProduct || 0, selectedFamilyId);

    const dateRangeOptions = [
      { value: 'week', label: '–ù–µ–¥–µ–ª—è' },
      { value: 'month', label: '–ú–µ—Å—è—Ü' },
      { value: '3months', label: '3 –º–µ—Å—è—Ü–∞' },
      { value: 'all', label: '–í—Å—ë –≤—Ä–µ–º—è' }
    ];

    return (
      <div className="space-y-6">
        <h2 className="text-2xl font-bold">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
        
        {/* –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ */}
        <div className="bg-white rounded-2xl p-6 border border-gray-200">
          <h3 className="font-semibold mb-4">–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞</h3>
          
          <div className="space-y-4">
            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ */}
            <div className="relative">
              <button
                onClick={() => setShowProductSelect(!showProductSelect)}
                className="w-full flex items-center justify-between p-3 border border-gray-300 rounded-lg hover:border-indigo-500 transition-colors"
              >
                <span className={selectedProduct ? 'text-gray-900' : 'text-gray-500'}>
                  {selectedProduct ? processedProducts.find(p => p.id === selectedProduct)?.name : '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç'}
                </span>
                <svg className={`w-5 h-5 text-gray-400 transition-transform ${showProductSelect ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>

              {showProductSelect && (
                <div className="absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                  {processedProducts.length === 0 ? (
                    <div className="p-4 text-center text-gray-500">
                      <p>–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                      <p className="text-sm mt-1">–î–æ–±–∞–≤—å—Ç–µ —á–µ–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã</p>
                    </div>
                  ) : (
                    processedProducts
                      .sort((a, b) => b.purchaseCount - a.purchaseCount)
                      .map(product => (
                        <button
                          key={product.id}
                          onClick={() => {
                            setSelectedProduct(product.id);
                            setShowProductSelect(false);
                          }}
                          className="w-full text-left p-3 hover:bg-gray-50 border-b border-gray-100 last:border-0"
                        >
                          <div className="font-medium text-gray-900">{product.name}</div>
                          <div className="text-sm text-gray-500">
                            {product.purchaseCount} {product.purchaseCount === 1 ? '–ø–æ–∫—É–ø–∫–∞' : product.purchaseCount < 5 ? '–ø–æ–∫—É–ø–∫–∏' : '–ø–æ–∫—É–ø–æ–∫'}
                          </div>
                        </button>
                      ))
                  )}
                </div>
              )}
            </div>

            {/* –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞ */}
            {selectedProduct && (
              <>
                <div className="space-y-4">
                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞ */}
                  <div className="flex gap-2">
                    <button
                      onClick={() => setChartType('quantity')}
                      className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors ${
                        chartType === 'quantity'
                          ? 'bg-indigo-600 text-white'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    </button>
                    <button
                      onClick={() => setChartType('price')}
                      className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors ${
                        chartType === 'price'
                          ? 'bg-indigo-600 text-white'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      –¶–µ–Ω–∞
                    </button>
                  </div>

                  {/* –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ */}
                  <div className="flex gap-2">
                    {dateRangeOptions.map(option => (
                      <button
                        key={option.value}
                        onClick={() => setDateRange(option.value)}
                        className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors ${
                          dateRange === option.value
                            ? 'bg-indigo-600 text-white'
                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                        }`}
                      >
                        {option.label}
                      </button>
                    ))}
                  </div>
                </div>

                {/* –ì—Ä–∞—Ñ–∏–∫ */}
                <div className="mt-6">
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="font-semibold text-gray-900">
                      {chartType === 'quantity' ? '–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫' : '–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞'}
                    </h4>
                    <div className="text-sm text-gray-500">
                      {productHistory?.length || 0} –ø–æ–∫—É–ø–æ–∫
                    </div>
                  </div>
                  
                  {historyLoading ? (
                    <div className="text-center py-8 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
                  ) : productHistory && productHistory.length > 0 ? (
                    <>
                      <div className="flex items-end justify-between gap-2 h-48 border-b border-gray-200 pb-2">
                        {productHistory.map((item, i) => {
                          const data = chartType === 'quantity' ? item.quantity : item.unit_price;
                          const maxValue = chartType === 'quantity' 
                            ? Math.max(...productHistory.map(h => h.quantity))
                            : Math.max(...productHistory.map(h => h.unit_price));
                          const height = (data / maxValue) * 100;
                          
                          return (
                            <div key={i} className="flex-1 flex flex-col items-center gap-1">
                              <div className="text-xs font-semibold text-gray-700">
                                {chartType === 'quantity' ? item.quantity : `‚Ç¨${item.unit_price.toFixed(2)}`}
                              </div>
                              <div 
                                className={`w-full rounded-t hover:opacity-80 transition-all cursor-pointer ${
                                  chartType === 'quantity' 
                                    ? 'bg-gradient-to-t from-indigo-500 to-indigo-400 hover:from-indigo-600 hover:to-indigo-500'
                                    : 'bg-gradient-to-t from-green-500 to-green-400 hover:from-green-600 hover:to-green-500'
                                }`}
                                style={{ height: `${height}%` }}
                              ></div>
                            </div>
                          );
                        })}
                      </div>
                      <div className="flex justify-between mt-2 text-xs text-gray-500">
                        {productHistory.map((item, i) => (
                          <div key={i} className="flex-1 text-center">
                            {new Date(item.date).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })}
                          </div>
                        ))}
                      </div>

                      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É */}
                      <div className="mt-6 grid grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                        {chartType === 'quantity' ? (
                          <>
                            <div>
                              <div className="text-xs text-gray-500">–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ</div>
                              <div className="text-lg font-bold text-gray-900">
                                {productHistory.reduce((sum, item) => sum + item.quantity, 0)}
                              </div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                              <div className="text-lg font-bold text-gray-900">
                                ‚Ç¨{productHistory.reduce((sum, item) => sum + item.price, 0).toFixed(2)}
                              </div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">–ß–∞—Å—Ç–æ—Ç–∞</div>
                              <div className="text-lg font-bold text-gray-900">
                                {processedProducts.find(p => p.id === selectedProduct)?.avgDays} –¥–Ω
                              </div>
                            </div>
                          </>
                        ) : (
                          <>
                            <div>
                              <div className="text-xs text-gray-500">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
                              <div className="text-lg font-bold text-gray-900">
                                ‚Ç¨{(productHistory.reduce((sum, item) => sum + item.unit_price, 0) / productHistory.length).toFixed(2)}
                              </div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">–ò–∑–º–µ–Ω–µ–Ω–∏–µ</div>
                              <div className={`text-lg font-bold ${
                                (() => {
                                  if (!productHistory || productHistory.length < 2) return 'text-gray-900';
                                  const firstPrice = productHistory[0].unit_price;
                                  const lastPrice = productHistory[productHistory.length - 1].unit_price;
                                  const change = ((lastPrice - firstPrice) / firstPrice) * 100;
                                  return change > 0 ? 'text-red-600' : change < 0 ? 'text-green-600' : 'text-gray-900';
                                })()
                              }`}>
                                {(() => {
                                  if (!productHistory || productHistory.length < 2) return '‚Äî';
                                  const firstPrice = productHistory[0].unit_price;
                                  const lastPrice = productHistory[productHistory.length - 1].unit_price;
                                  const change = ((lastPrice - firstPrice) / firstPrice) * 100;
                                  return `${change > 0 ? '+' : ''}${change.toFixed(1)}%`;
                                })()}
                              </div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">–î–∏–∞–ø–∞–∑–æ–Ω</div>
                              <div className="text-lg font-bold text-gray-900">
                                ‚Ç¨{Math.min(...productHistory.map(h => h.unit_price)).toFixed(2)} - ‚Ç¨{Math.max(...productHistory.map(h => h.unit_price)).toFixed(2)}
                              </div>
                            </div>
                          </>
                        )}
                      </div>
                    </>
                  ) : (
                    <div className="text-center py-8 text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
                  )}
                </div>
              </>
            )}

            {!selectedProduct && (
              <div className="py-12 text-center text-gray-400">
                <BarChart3 size={48} className="mx-auto mb-3 opacity-50" />
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–Ω–∞–º–∏–∫–∏</p>
              </div>
            )}
          </div>
        </div>

        <div className="bg-white rounded-2xl p-6 border border-gray-200">
          <h3 className="font-semibold mb-4">–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º</h3>
          <div className="space-y-3">
            {processedProducts.sort((a, b) => b.calories - a.calories).map(product => (
              <div key={product.id} className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="text-sm font-medium">{product.name}</div>
                  <div className="w-full bg-gray-100 rounded-full h-2 mt-1">
                    <div 
                      className="bg-orange-400 h-2 rounded-full" 
                      style={{ width: `${(product.calories / 1500) * 100}%` }}
                    ></div>
                  </div>
                </div>
                <div className="ml-4 text-sm font-semibold text-gray-700">{product.calories} –∫–∫–∞–ª</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const ProductsPage = () => {
    const [editingId, setEditingId] = useState<number | null>(null);
    const [editedCalories, setEditedCalories] = useState<string>('');
    const [showSuccessMessage, setShowSuccessMessage] = useState(false);

    const startEditing = (product: typeof processedProducts[0]) => {
      setEditingId(product.id);
      setEditedCalories(product.calories.toString());
    };

    const cancelEditing = () => {
      setEditingId(null);
      setEditedCalories('');
    };

    const saveCalories = async (productId: number) => {
      const newCalories = parseInt(editedCalories);
      if (!isNaN(newCalories) && newCalories >= 0) {
        try {
          await updateProduct(productId, { calories: newCalories });
          setEditingId(null);
          setEditedCalories('');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          setShowSuccessMessage(true);
          setTimeout(() => setShowSuccessMessage(false), 3000);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π:', error);
        }
      }
    };

    return (
      <div className="space-y-6">
        <h2 className="text-2xl font-bold">–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</h2>
        
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        {showSuccessMessage && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-center gap-3">
            <CheckCircle size={20} className="text-green-600" />
            <div>
              <div className="font-medium text-green-800">–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞</div>
              <div className="text-sm text-green-600">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞</div>
            </div>
          </div>
        )}
        
        <div className="space-y-3">
          {productsLoading ? (
            <div className="text-center py-8 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</div>
          ) : (
            processedProducts.map(product => (
              <div key={product.id} className="bg-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-900 text-lg">{product.name}</h3>
                    {product.originalName && (
                      <div className="text-xs text-gray-400 mt-0.5">{product.originalName}</div>
                    )}
                    <div className="text-sm text-gray-500 mt-1">
                      –ö—É–ø–ª–µ–Ω–æ {product.purchaseCount} —Ä–∞–∑
                    </div>
                  </div>
                  <div className="text-xl font-bold text-indigo-600">
                    ‚Ç¨{product.price.toFixed(2)}
                  </div>
                </div>

                <div className="border-t border-gray-100 pt-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-gray-600">–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:</span>
                      {editingId === product.id ? (
                        <div className="flex items-center gap-2">
                          <input
                            type="number"
                            value={editedCalories}
                            onChange={(e) => setEditedCalories(e.target.value)}
                            className="w-24 px-2 py-1 border border-indigo-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                            autoFocus
                          />
                          <span className="text-sm text-gray-600">–∫–∫–∞–ª</span>
                        </div>
                      ) : (
                        <span className="text-base font-semibold text-gray-900">
                          {product.calories} –∫–∫–∞–ª
                        </span>
                      )}
                    </div>

                    <div className="flex items-center gap-2">
                      {editingId === product.id ? (
                        <>
                          <button
                            onClick={() => saveCalories(product.id)}
                            className="p-2 bg-green-100 text-green-600 rounded-lg hover:bg-green-200 transition-colors"
                            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                          >
                            <Save size={16} />
                          </button>
                          <button
                            onClick={cancelEditing}
                            className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
                            title="–û—Ç–º–µ–Ω–∞"
                          >
                            <X size={16} />
                          </button>
                        </>
                      ) : (
                        <button
                          onClick={() => startEditing(product)}
                          className="p-2 bg-indigo-100 text-indigo-600 rounded-lg hover:bg-indigo-200 transition-colors"
                          title="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"
                        >
                          <Edit2 size={16} />
                        </button>
                      )}
                    </div>
                  </div>
                </div>

                <div className="mt-3 pt-3 border-t border-gray-100">
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <div>
                      <div className="text-gray-500">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞</div>
                      <div className="font-medium text-gray-900">
                        {new Date(product.lastPurchase).toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })}
                      </div>
                    </div>
                    {product.avgDays && (
                      <div>
                        <div className="text-gray-500">–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–∫–∏</div>
                        <div className="font-medium text-gray-900">
                          –ö–∞–∂–¥—ã–µ {product.avgDays} –¥–Ω–µ–π
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        <div className="bg-indigo-50 border border-indigo-200 rounded-xl p-4">
          <div className="flex items-start gap-3">
            <div className="bg-indigo-100 p-2 rounded-lg">
              <ShoppingCart size={20} className="text-indigo-600" />
            </div>
            <div className="flex-1">
              <h4 className="font-semibold text-gray-900 mb-1">–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {processedProducts.length}</h4>
              <div className="text-sm text-gray-600">
                –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {processedProducts.reduce((sum, p) => sum + p.calories, 0)} –∫–∫–∞–ª
              </div>
              <div className="text-sm text-gray-600">
                –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚Ç¨{(processedProducts.reduce((sum, p) => sum + p.price, 0) / processedProducts.length).toFixed(2)}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4 sticky top-0 z-10">
        <div className="max-w-md mx-auto">
          <h1 className="text-xl font-bold text-gray-900">Grocery Tracker</h1>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-md mx-auto px-6 py-6 pb-24">
        {activeTab === 'home' && <HomePage />}
        {activeTab === 'upload' && <UploadPage />}
        {activeTab === 'products' && <ProductsPage />}
        {activeTab === 'analytics' && <AnalyticsPage />}
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-6 py-3">
        <div className="max-w-md mx-auto flex items-center justify-around">
          <button 
            onClick={() => setActiveTab('home')}
            className={`flex flex-col items-center gap-1 p-2 ${activeTab === 'home' ? 'text-indigo-600' : 'text-gray-400'}`}
          >
            <Home size={22} />
            <span className="text-xs font-medium">–ì–ª–∞–≤–Ω–∞—è</span>
          </button>
          <button 
            onClick={() => setActiveTab('upload')}
            className={`flex flex-col items-center gap-1 p-2 ${activeTab === 'upload' ? 'text-indigo-600' : 'text-gray-400'}`}
          >
            <Camera size={22} />
            <span className="text-xs font-medium">–ß–µ–∫</span>
          </button>
          <button 
            onClick={() => setActiveTab('products')}
            className={`flex flex-col items-center gap-1 p-2 ${activeTab === 'products' ? 'text-indigo-600' : 'text-gray-400'}`}
          >
            <ShoppingCart size={22} />
            <span className="text-xs font-medium">–ü—Ä–æ–¥—É–∫—Ç—ã</span>
          </button>
          <button 
            onClick={() => setActiveTab('analytics')}
            className={`flex flex-col items-center gap-1 p-2 ${activeTab === 'analytics' ? 'text-indigo-600' : 'text-gray-400'}`}
          >
            <BarChart3 size={22} />
            <span className="text-xs font-medium">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default GroceryTrackerApp;