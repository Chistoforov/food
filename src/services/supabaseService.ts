import { supabase, Product, Receipt, ProductHistory, MonthlyStats, PendingReceipt } from '../lib/supabase'

export class SupabaseService {
  // –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  static async getProducts(familyId: number, limit?: number, offset?: number): Promise<Product[]> {
    let query = supabase
      .from('products')
      .select('*')
      .eq('family_id', familyId)
      .order('created_at', { ascending: false })

    if (limit !== undefined) {
      query = query.limit(limit)
    }

    if (offset !== undefined) {
      query = query.range(offset, offset + (limit || 10) - 1)
    }

    const { data, error } = await query

    if (error) throw error
    return data || []
  }

  static async createProduct(product: Omit<Product, 'id' | 'created_at' | 'updated_at'>): Promise<Product> {
    const { data, error } = await supabase
      .from('products')
      .insert([product])
      .select()
      .single()

    if (error) throw error
    return data
  }

  static async updateProduct(id: number, updates: Partial<Product>): Promise<Product> {
    const { data, error } = await supabase
      .from('products')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return data
  }

  static async deleteProduct(id: number): Promise<void> {
    const { error } = await supabase
      .from('products')
      .delete()
      .eq('id', id)

    if (error) throw error
  }

  // –†–∞–±–æ—Ç–∞ —Å —á–µ–∫–∞–º–∏
  static async getReceipts(familyId: number, limit?: number, offset?: number): Promise<Receipt[]> {
    let query = supabase
      .from('receipts')
      .select('*')
      .eq('family_id', familyId)
      .order('date', { ascending: false })

    if (limit !== undefined) {
      query = query.limit(limit)
    }

    if (offset !== undefined) {
      query = query.range(offset, offset + (limit || 10) - 1)
    }

    const { data, error } = await query

    if (error) throw error
    return data || []
  }

  static async createReceipt(receipt: Omit<Receipt, 'id' | 'created_at'>): Promise<Receipt> {
    const { data, error } = await supabase
      .from('receipts')
      .insert([receipt])
      .select()
      .single()

    if (error) throw error
    return data
  }

  static async updateReceipt(id: number, updates: Partial<Receipt>): Promise<Receipt> {
    const { data, error } = await supabase
      .from('receipts')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return data
  }

  static async deleteReceipt(id: number, familyId: number): Promise<void> {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–µ–∫ #' + id + ' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const { data: receipt, error: fetchError } = await supabase
        .from('receipts')
        .select('date')
        .eq('id', id)
        .single()

      if (fetchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:', fetchError)
        throw fetchError
      }

      // –£–¥–∞–ª—è–µ–º —á–µ–∫
      // CASCADE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç:
      // 1. –ó–∞–ø–∏—Å–∏ –∏–∑ product_history
      // 2. –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä delete_products_without_history)
      // 3. –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä recalculate_stats_after_receipt_delete)
      const { error: deleteError } = await supabase
        .from('receipts')
        .delete()
        .eq('id', id)

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:', deleteError)
        throw deleteError
      }

      console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
      if (receipt?.date) {
        const receiptDate = new Date(receipt.date)
        const year = receiptDate.getFullYear()
        const month = String(receiptDate.getMonth() + 1).padStart(2, '0')
        
        try {
          await this.recalculateMonthlyStats(familyId, month, year)
          console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ')
        } catch (statsError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—Ç—Ä–∏–≥–≥–µ—Ä –ë–î –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–µ—Ä–µ—Å—á–µ—Ç):', statsError)
        }
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error)
      throw error
    }
  }

  // –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  static async getProductHistory(productId: number, familyId: number): Promise<ProductHistory[]> {
    const { data, error } = await supabase
      .from('product_history')
      .select('*')
      .eq('product_id', productId)
      .eq('family_id', familyId)
      .order('date', { ascending: true })

    if (error) throw error
    return data || []
  }

  static async addProductHistory(history: Omit<ProductHistory, 'id' | 'created_at'>): Promise<ProductHistory> {
    const { data, error } = await supabase
      .from('product_history')
      .insert([history])
      .select()
      .single()

    if (error) throw error
    return data
  }

  // –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  static async getMonthlyStats(familyId: number, month?: string, year?: number): Promise<MonthlyStats[]> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–µ–º—å–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –º–µ—Å—è—Ü–∞
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É/–≥–æ–¥—É –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    let query = supabase
      .from('monthly_stats')
      .select('*')
      .eq('family_id', familyId)

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω month –∏ year, —Å—Ç—Ä–æ–∏–º —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM' –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (month && year) {
      const monthKey = `${year}-${month.padStart(2, '0')}`
      query = query.eq('month', monthKey)
    } else if (month && !year) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É 'YYYY-MM' –≥–¥–µ MM —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      // –≠—Ç–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      query = query.like('month', `%-${month.padStart(2, '0')}`)
    } else if (!month && year) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –≥–æ–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É 'YYYY-MM'
      query = query.like('month', `${year}-%`)
    }

    const { data, error } = await query.order('month', { ascending: false })

    if (error) throw error
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      familyId,
      month: month || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      year: year || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      count: data?.length || 0,
      stats: data?.map(s => ({ month: s.month, year: s.year, spent: s.total_spent })) || []
    })
    
    return data || []
  }

  static async createOrUpdateMonthlyStats(stats: Omit<MonthlyStats, 'id' | 'created_at' | 'updated_at'>): Promise<MonthlyStats> {
    const { data, error } = await supabase
      .from('monthly_stats')
      .upsert([stats], { 
        onConflict: 'family_id,month,year',
        ignoreDuplicates: false 
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  static async calculateProductStats(productId: number, familyId: number): Promise<{
    avgDays: number | null
    predictedEnd: string | null
    status: 'ending-soon' | 'ok' | 'calculating'
  }> {
    const history = await this.getProductHistory(productId, familyId)
    
    if (history.length < 2) {
      return {
        avgDays: null,
        predictedEnd: null,
        status: 'calculating'
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
    const daysBetweenPurchases = []
    for (let i = 1; i < history.length; i++) {
      const prevDate = new Date(history[i - 1].date)
      const currDate = new Date(history[i].date)
      const daysDiff = Math.floor((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24))
      daysBetweenPurchases.push(daysDiff)
    }

    const avgDays = Math.round(
      daysBetweenPurchases.reduce((sum, days) => sum + days, 0) / daysBetweenPurchases.length
    )

    // –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const lastPurchase = new Date(history[history.length - 1].date)
    const predictedEnd = new Date(lastPurchase.getTime() + avgDays * 24 * 60 * 60 * 1000)
    const predictedEndString = predictedEnd.toISOString().split('T')[0]

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const today = new Date()
    const daysUntilEnd = Math.floor((predictedEnd.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))
    
    let status: 'ending-soon' | 'ok' | 'calculating' = 'ok'
    if (daysUntilEnd <= 2) {
      status = 'ending-soon'
    }

    return {
      avgDays,
      predictedEnd: predictedEndString,
      status
    }
  }

  static async updateProductStats(productId: number, familyId: number): Promise<void> {
    const stats = await this.calculateProductStats(productId, familyId)
    await this.updateProduct(productId, {
      avg_days: stats.avgDays,
      predicted_end: stats.predictedEnd,
      status: stats.status
    })
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static async recalculateMonthlyStats(familyId: number, month: string, year: number): Promise<void> {
    console.log('üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { familyId, month, year })
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { error: rpcError } = await supabase.rpc('recalculate_monthly_stats', {
        p_family_id: familyId,
        p_month: month,
        p_year: year
      })
      
      if (rpcError) {
        console.warn('‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥:', rpcError.message)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ RPC
        await this.recalculateMonthlyStatsAlternative(familyId, month, year)
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ RPC')
      }
    } catch (error: any) {
      // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏—á–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ç—å –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥:', error?.message || error)
      try {
        await this.recalculateMonthlyStatsAlternative(familyId, month, year)
      } catch (altError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', altError)
        throw altError
      }
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ RPC
  static async recalculateMonthlyStatsAlternative(familyId: number, month: string, year: number): Promise<void> {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è:', { month, year })
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    const { data: history, error: historyError } = await supabase
      .from('product_history')
      .select(`
        quantity,
        date,
        products(calories)
      `)
      .eq('family_id', familyId)
      .gte('date', `${year}-${month.padStart(2, '0')}-01`)
      .lt('date', `${year}-${String(parseInt(month) + 1).padStart(2, '0')}-01`)

    if (historyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:', historyError)
      throw historyError
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    const { data: receipts, error: receiptsError } = await supabase
      .from('receipts')
      .select('total_amount')
      .eq('family_id', familyId)
      .gte('date', `${year}-${month.padStart(2, '0')}-01`)
      .lt('date', `${year}-${String(parseInt(month) + 1).padStart(2, '0')}-01`)

    if (receiptsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', receiptsError)
      throw receiptsError
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalSpent = receipts?.reduce((sum, receipt) => sum + (receipt.total_amount || 0), 0) || 0
    const totalCalories = history?.reduce((sum, item: any) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ products —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç calories
      const calories = (item.products && typeof item.products.calories === 'number') ? item.products.calories : 0
      const quantity = item.quantity || 0
      return sum + (calories * quantity)
    }, 0) || 0
    
    const daysInMonth = new Date(year, parseInt(month), 0).getDate()
    const avgCaloriesPerDay = daysInMonth > 0 ? Math.round(totalCalories / daysInMonth) : 0
    const receiptsCount = receipts?.length || 0

    console.log('üìä –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      totalSpent,
      totalCalories,
      avgCaloriesPerDay,
      receiptsCount,
      daysInMonth,
      historyLength: history?.length || 0,
      receiptsData: receipts?.map(r => r.total_amount),
      historyData: history?.map((h: any) => ({ 
        calories: h.products?.calories, 
        quantity: h.quantity 
      }))
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const monthKey = `${year}-${month.padStart(2, '0')}`
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', {
      family_id: familyId,
      month: monthKey,
      year: year,
      total_spent: totalSpent,
      total_calories: totalCalories,
      avg_calories_per_day: avgCaloriesPerDay,
      receipts_count: receiptsCount
    })
    
    const { error: upsertError } = await supabase
      .from('monthly_stats')
      .upsert({
        family_id: familyId,
        month: monthKey,
        year: year,
        total_spent: totalSpent,
        total_calories: totalCalories,
        avg_calories_per_day: avgCaloriesPerDay,
        receipts_count: receiptsCount
      }, {
        onConflict: 'family_id,month,year'
      })

    if (upsertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', upsertError)
      throw upsertError
    }

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º')
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
  static async recalculateStatsForProduct(productId: number, familyId: number): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã, –≥–¥–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const history = await this.getProductHistory(productId, familyId)
    
    if (history.length === 0) return

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã
    const months = new Set<string>()
    history.forEach(item => {
      const date = new Date(item.date)
      const year = date.getFullYear()
      const month = String(date.getMonth() + 1).padStart(2, '0')
      months.add(`${year}-${month}`)
    })

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    for (const monthYear of months) {
      const [year, month] = monthYear.split('-')
      await this.recalculateMonthlyStats(familyId, month, parseInt(year))
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞
  static async processReceipt(
    familyId: number,
    items: Array<{
      name: string
      originalName?: string
      quantity: number
      price: number
      calories: number
    }>,
    total: number,
    date: string
  ): Promise<Receipt> {
    // –°–æ–∑–¥–∞–µ–º —á–µ–∫
    const receipt = await this.createReceipt({
      family_id: familyId,
      date: date,
      items_count: items.length,
      total_amount: total,
      status: 'processed'
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const item of items) {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      const { data: existingProducts } = await supabase
        .from('products')
        .select('*')
        .eq('family_id', familyId)
        .ilike('name', item.name)
        .limit(1)

      let product: Product

      if (existingProducts && existingProducts.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
        product = existingProducts[0]
        
        // –í–ê–ñ–ù–û: price –≤ —á–µ–∫–µ - —ç—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!
        // –ù–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –∏–ª–∏ —É–º–Ω–æ–∂–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        await this.updateProduct(product.id, {
          last_purchase: date,
          price: item.price, // –¶–µ–Ω–∞ –∏–∑ —á–µ–∫–∞ - —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!
          calories: item.calories, // –ö–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          purchase_count: (product.purchase_count || 0) + 1,
          original_name: item.originalName || product.original_name
        })
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        // –í–ê–ñ–ù–û: price –≤ —á–µ–∫–µ - —ç—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!
        product = await this.createProduct({
          name: item.name,
          original_name: item.originalName,
          family_id: familyId,
          last_purchase: date,
          price: item.price, // –¶–µ–Ω–∞ –∏–∑ —á–µ–∫–∞ - —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!
          calories: item.calories, // –ö–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          purchase_count: 1,
          status: 'calculating',
          avg_days: null,
          predicted_end: null
        })
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —á–µ–∫—É
      await this.addProductHistory({
        product_id: product.id,
        family_id: familyId,
        date: date,
        quantity: item.quantity,
        price: item.price,
        unit_price: item.quantity > 0 ? item.price / item.quantity : item.price,
        receipt_id: receipt.id
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
      await this.updateProductStats(product.id, familyId)
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const receiptDate = new Date(date)
    const year = receiptDate.getFullYear()
    const month = String(receiptDate.getMonth() + 1).padStart(2, '0')
    await this.recalculateMonthlyStats(familyId, month, year)

    return receipt
  }

  // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–µ–º—å–∏
  static async recalculateFamilyAnalytics(familyId: number): Promise<void> {
    console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Å–µ–º—å–∏ ${familyId}`)
    
    try {
      const { error } = await supabase.rpc('recalculate_family_analytics', {
        p_family_id: familyId
      })

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ–º—å–∏:', error)
        throw error
      }

      console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–µ–º—å–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ–º—å–∏:', error)
      throw error
    }
  }

  // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ–º–µ–π
  static async recalculateAllAnalytics(): Promise<void> {
    console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–µ–º–µ–π')
    
    try {
      const { error } = await supabase.rpc('recalculate_all_analytics')

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
        throw error
      }

      console.log('‚úÖ –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
      throw error
    }
  }

  // –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ —Å —á–µ–∫–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–º—å–∏
  static async recalculateAllMonthsWithReceipts(familyId: number): Promise<void> {
    console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã —Å —á–µ–∫–∞–º–∏ –¥–ª—è —Å–µ–º—å–∏:', familyId)
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { error } = await supabase.rpc('recalculate_all_months_with_receipts', {
        p_family_id: familyId
      })

      if (error) {
        console.warn('‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç:', error.message)
        // Fallback: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
        await this.recalculateAllMonthsManually(familyId)
      } else {
        console.log('‚úÖ –í—Å–µ –º–µ—Å—è—Ü—ã —Å —á–µ–∫–∞–º–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ RPC')
      }
    } catch (error: any) {
      // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏—á–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ç—å), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç:', error?.message || error)
      try {
        await this.recalculateAllMonthsManually(familyId)
      } catch (manualError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', manualError)
        throw manualError
      }
    }
  }

  // –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ —Å —á–µ–∫–∞–º–∏
  static async recalculateAllMonthsManually(familyId: number): Promise<void> {
    console.log('üîÑ –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ —Å —á–µ–∫–∞–º–∏...')
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏
      const receipts = await this.getReceipts(familyId)
      
      if (receipts.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞')
        return
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
      const monthsData = new Map<string, { year: number, month: string, totalSpent: number, receiptsCount: number }>()
      
      receipts.forEach(receipt => {
        const date = new Date(receipt.date)
        const year = date.getFullYear()
        const month = String(date.getMonth() + 1).padStart(2, '0')
        const key = `${year}-${month}`
        
        if (!monthsData.has(key)) {
          monthsData.set(key, { year, month, totalSpent: 0, receiptsCount: 0 })
        }
        
        const data = monthsData.get(key)!
        data.totalSpent += receipt.total_amount || 0
        data.receiptsCount += 1
      })
      
      console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${monthsData.size} –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞:`, Array.from(monthsData.keys()))
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
      for (const [monthKey, data] of monthsData) {
        console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ${monthKey}...`)
        await this.recalculateMonthlyStats(familyId, data.month, data.year)
      }
      
      console.log('‚úÖ –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error)
      throw error
    }
  }

  // === BACKGROUND RECEIPT PROCESSING ===
  
  /**
   * Upload receipt image to Supabase Storage and create pending receipt
   * Returns the pending receipt ID for tracking
   */
  static async uploadReceiptForProcessing(
    familyId: number,
    imageFile: File
  ): Promise<PendingReceipt> {
    try {
      // Generate unique filename
      const timestamp = Date.now()
      const fileExt = imageFile.name.split('.').pop()
      const fileName = `${familyId}/${timestamp}.${fileExt}`

      console.log('üì§ Uploading image to storage:', fileName)

      // Upload image to Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('receipts')
        .upload(fileName, imageFile, {
          cacheControl: '3600',
          upsert: false
        })

      if (uploadError) {
        console.error('‚ùå Upload error:', uploadError)
        throw uploadError
      }

      console.log('‚úÖ Image uploaded successfully:', uploadData.path)

      // Create pending receipt record
      const { data: pendingReceipt, error: insertError } = await supabase
        .from('pending_receipts')
        .insert({
          family_id: familyId,
          image_url: uploadData.path,
          status: 'pending',
          attempts: 0
        })
        .select()
        .single()

      if (insertError) {
        console.error('‚ùå Insert error:', insertError)
        throw insertError
      }

      console.log('‚úÖ Pending receipt created:', pendingReceipt.id)

      return pendingReceipt
    } catch (error) {
      console.error('‚ùå Error uploading receipt:', error)
      throw error
    }
  }

  /**
   * Trigger background processing of a pending receipt
   * This is a fire-and-forget call - user doesn't wait for completion
   */
  static async triggerReceiptProcessing(pendingReceiptId: number): Promise<void> {
    try {
      console.log('üöÄ Triggering background processing for receipt:', pendingReceiptId)

      // Call the Vercel serverless function
      // Don't await - fire and forget
      fetch('/api/process-receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ pendingReceiptId })
      }).catch(error => {
        console.error('‚ùå Error triggering processing (non-blocking):', error)
      })

      console.log('‚úÖ Processing triggered (background)')
    } catch (error) {
      console.error('‚ùå Error triggering processing:', error)
      // Don't throw - this is non-blocking
    }
  }

  /**
   * Get pending receipts for a family
   */
  static async getPendingReceipts(familyId: number): Promise<PendingReceipt[]> {
    const { data, error } = await supabase
      .from('pending_receipts')
      .select('*')
      .eq('family_id', familyId)
      .order('created_at', { ascending: false })

    if (error) throw error
    return data || []
  }

  /**
   * Subscribe to pending receipt updates using Realtime
   * Returns unsubscribe function
   */
  static subscribeToPendingReceipts(
    familyId: number,
    callback: (receipt: PendingReceipt) => void
  ): () => void {
    const channel = supabase
      .channel(`pending_receipts_${familyId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'pending_receipts',
          filter: `family_id=eq.${familyId}`
        },
        (payload) => {
          console.log('üì° Realtime update:', payload)
          callback(payload.new as PendingReceipt)
        }
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }

  /**
   * Delete a pending receipt (cleanup)
   */
  static async deletePendingReceipt(id: number): Promise<void> {
    const { error } = await supabase
      .from('pending_receipts')
      .delete()
      .eq('id', id)

    if (error) throw error
  }

  // === RECEIPT DETAILS AND DATE EDITING ===
  
  /**
   * Get all products from a receipt with their details
   */
  static async getReceiptProducts(receiptId: number, familyId: number): Promise<Array<ProductHistory & { product?: Product }>> {
    const { data, error } = await supabase
      .from('product_history')
      .select(`
        *,
        products (*)
      `)
      .eq('receipt_id', receiptId)
      .eq('family_id', familyId)
      .order('created_at', { ascending: true })

    if (error) throw error
    
    // Transform the data to include product details
    return (data || []).map(item => ({
      ...item,
      product: item.products as unknown as Product
    }))
  }

  /**
   * Update receipt date and all associated product_history dates
   * This will automatically trigger recalculation of monthly stats for both old and new months
   */
  static async updateReceiptDate(
    receiptId: number, 
    familyId: number, 
    newDate: string
  ): Promise<void> {
    console.log('üìÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —á–µ–∫–∞ #' + receiptId + ' –Ω–∞ ' + newDate)
    
    try {
      // Get the old receipt date first for stats recalculation
      const { data: oldReceipt, error: fetchError } = await supabase
        .from('receipts')
        .select('date')
        .eq('id', receiptId)
        .eq('family_id', familyId)
        .single()

      if (fetchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:', fetchError)
        throw fetchError
      }

      const oldDate = oldReceipt.date
      
      // Update the receipt date
      const { error: receiptError } = await supabase
        .from('receipts')
        .update({ date: newDate })
        .eq('id', receiptId)
        .eq('family_id', familyId)

      if (receiptError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —á–µ–∫–∞:', receiptError)
        throw receiptError
      }

      console.log('‚úÖ –î–∞—Ç–∞ —á–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

      // Update all product_history entries for this receipt
      const { error: historyError } = await supabase
        .from('product_history')
        .update({ date: newDate })
        .eq('receipt_id', receiptId)
        .eq('family_id', familyId)

      if (historyError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', historyError)
        throw historyError
      }

      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

      // Update last_purchase date for all products in this receipt
      const { data: productHistoryItems, error: phError } = await supabase
        .from('product_history')
        .select('product_id')
        .eq('receipt_id', receiptId)

      if (phError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', phError)
        throw phError
      }

      // For each product, update last_purchase if this was their latest purchase
      for (const item of productHistoryItems || []) {
        // Get the latest purchase date for this product
        const { data: latestPurchase } = await supabase
          .from('product_history')
          .select('date')
          .eq('product_id', item.product_id)
          .order('date', { ascending: false })
          .limit(1)
          .single()

        if (latestPurchase) {
          await supabase
            .from('products')
            .update({ last_purchase: latestPurchase.date })
            .eq('id', item.product_id)
        }
      }

      console.log('‚úÖ –î–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')

      // Recalculate stats for both old and new months
      const oldReceiptDate = new Date(oldDate)
      const oldYear = oldReceiptDate.getFullYear()
      const oldMonth = String(oldReceiptDate.getMonth() + 1).padStart(2, '0')

      const newReceiptDate = new Date(newDate)
      const newYear = newReceiptDate.getFullYear()
      const newMonth = String(newReceiptDate.getMonth() + 1).padStart(2, '0')

      console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞:', oldMonth, oldYear)
      await this.recalculateMonthlyStats(familyId, oldMonth, oldYear)

      // Only recalculate new month if it's different from old month
      if (oldMonth !== newMonth || oldYear !== newYear) {
        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞:', newMonth, newYear)
        await this.recalculateMonthlyStats(familyId, newMonth, newYear)
      }

      console.log('‚úÖ –î–∞—Ç–∞ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞')
    } catch (error) {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —á–µ–∫–∞:', error)
      throw error
    }
  }
}
