import { useState, useEffect } from 'react'
import { SupabaseService } from '../services/supabaseService'
import { Product, Receipt, Family, ProductHistory, MonthlyStats } from '../lib/supabase'

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
export const useProducts = (familyId: number) => {
  const [products, setProducts] = useState<Product[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [hasMore, setHasMore] = useState(true)
  const [loadingMore, setLoadingMore] = useState(false)

  const fetchProducts = async (limit?: number, offset?: number, append: boolean = false) => {
    try {
      if (append) {
        setLoadingMore(true)
      } else {
        setLoading(true)
      }
      setError(null)
      const data = await SupabaseService.getProducts(familyId, limit, offset)
      
      if (append) {
        setProducts(prev => [...prev, ...data])
      } else {
        setProducts(data)
      }
      
      // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å –º–µ–Ω—å—à–µ, —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (limit !== undefined && data.length < limit) {
        setHasMore(false)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    } finally {
      setLoading(false)
      setLoadingMore(false)
    }
  }

  const loadMore = async (limit: number) => {
    if (!hasMore || loadingMore) return
    await fetchProducts(limit, products.length, true)
  }

  const updateProduct = async (id: number, updates: Partial<Product>) => {
    try {
      setError(null)
      const updatedProduct = await SupabaseService.updateProduct(id, updates)
      setProducts(prev => prev.map(p => p.id === id ? updatedProduct : p))
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (updates.calories !== undefined) {
        await SupabaseService.recalculateStatsForProduct(id, familyId)
      }
      
      return updatedProduct
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞')
      throw err
    }
  }

  const createProduct = async (product: Omit<Product, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      setError(null)
      const newProduct = await SupabaseService.createProduct(product)
      setProducts(prev => [newProduct, ...prev])
      return newProduct
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞')
      throw err
    }
  }

  const deleteProduct = async (id: number) => {
    try {
      setError(null)
      await SupabaseService.deleteProduct(id)
      setProducts(prev => prev.filter(p => p.id !== id))
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞')
      throw err
    }
  }

  useEffect(() => {
    if (familyId) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      fetchProducts(15, 0, false)
    }
  }, [familyId])

  return {
    products,
    loading,
    loadingMore,
    hasMore,
    error,
    refetch: fetchProducts,
    loadMore,
    updateProduct,
    createProduct,
    deleteProduct
  }
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏
export const useReceipts = (familyId: number) => {
  const [receipts, setReceipts] = useState<Receipt[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [hasMore, setHasMore] = useState(true)
  const [loadingMore, setLoadingMore] = useState(false)

  const fetchReceipts = async (limit?: number, offset?: number, append: boolean = false) => {
    try {
      if (append) {
        setLoadingMore(true)
      } else {
        setLoading(true)
      }
      setError(null)
      const data = await SupabaseService.getReceipts(familyId, limit, offset)
      
      if (append) {
        setReceipts(prev => [...prev, ...data])
      } else {
        setReceipts(data)
      }
      
      // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å –º–µ–Ω—å—à–µ, —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (limit !== undefined && data.length < limit) {
        setHasMore(false)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤')
    } finally {
      setLoading(false)
      setLoadingMore(false)
    }
  }

  const loadMore = async (limit: number) => {
    if (!hasMore || loadingMore) return
    await fetchReceipts(limit, receipts.length, true)
  }

  const createReceipt = async (receipt: Omit<Receipt, 'id' | 'created_at'>) => {
    try {
      setError(null)
      const newReceipt = await SupabaseService.createReceipt(receipt)
      setReceipts(prev => [newReceipt, ...prev])
      return newReceipt
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞')
      throw err
    }
  }

  const deleteReceipt = async (id: number) => {
    try {
      setError(null)
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–µ–∫ #' + id + ' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
      
      await SupabaseService.deleteReceipt(id, familyId)
      
      console.log('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...')
      setReceipts(prev => {
        const filtered = prev.filter(r => r.id !== id)
        console.log('üìä –ß–µ–∫–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', prev.length, '–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', filtered.length)
        return filtered
      })
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:', err)
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞')
      throw err
    }
  }

  useEffect(() => {
    if (familyId) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —á–µ–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      fetchReceipts(20, 0, false)
    }
  }, [familyId])

  return {
    receipts,
    loading,
    loadingMore,
    hasMore,
    error,
    refetch: fetchReceipts,
    loadMore,
    createReceipt,
    deleteReceipt
  }
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–º—å—è–º–∏
export const useFamilies = () => {
  const [families, setFamilies] = useState<Family[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchFamilies = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await SupabaseService.getFamilies()
      setFamilies(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–º–µ–π')
    } finally {
      setLoading(false)
    }
  }

  const createFamily = async (family: Omit<Family, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      setError(null)
      const newFamily = await SupabaseService.createFamily(family)
      setFamilies(prev => [newFamily, ...prev])
      return newFamily
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏')
      throw err
    }
  }

  const updateFamily = async (id: number, updates: Partial<Family>) => {
    try {
      setError(null)
      const updatedFamily = await SupabaseService.updateFamily(id, updates)
      setFamilies(prev => prev.map(f => f.id === id ? updatedFamily : f))
      return updatedFamily
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–º—å–∏')
      throw err
    }
  }

  useEffect(() => {
    fetchFamilies()
  }, [])

  return {
    families,
    loading,
    error,
    refetch: fetchFamilies,
    createFamily,
    updateFamily
  }
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const useProductHistory = (productId: number, familyId: number) => {
  const [history, setHistory] = useState<ProductHistory[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchHistory = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await SupabaseService.getProductHistory(productId, familyId)
      setHistory(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏')
    } finally {
      setLoading(false)
    }
  }

  const addHistory = async (historyItem: Omit<ProductHistory, 'id' | 'created_at'>) => {
    try {
      setError(null)
      const newHistory = await SupabaseService.addProductHistory(historyItem)
      setHistory(prev => [...prev, newHistory])
      return newHistory
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏')
      throw err
    }
  }

  useEffect(() => {
    if (productId && familyId) {
      fetchHistory()
    }
  }, [productId, familyId])

  return {
    history,
    loading,
    error,
    refetch: fetchHistory,
    addHistory
  }
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
export const useMonthlyStats = (familyId: number, month?: string, year?: number) => {
  const [stats, setStats] = useState<MonthlyStats[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchStats = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await SupabaseService.getMonthlyStats(familyId, month, year)
      setStats(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    } finally {
      setLoading(false)
    }
  }

  const createOrUpdateStats = async (statsData: Omit<MonthlyStats, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      setError(null)
      const newStats = await SupabaseService.createOrUpdateMonthlyStats(statsData)
      setStats(prev => {
        const existing = prev.find(s => s.month === newStats.month && s.year === newStats.year)
        if (existing) {
          return prev.map(s => s.id === newStats.id ? newStats : s)
        }
        return [newStats, ...prev]
      })
      return newStats
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      throw err
    }
  }

  const recalculateStats = async (month?: string, year?: number) => {
    try {
      setError(null)
      setLoading(true) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      
      // –ï—Å–ª–∏ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã —Å —á–µ–∫–∞–º–∏
      if (!month || !year) {
        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ —Å —á–µ–∫–∞–º–∏...')
        await SupabaseService.recalculateAllMonthsWithReceipts(familyId)
      } else {
        const currentDate = new Date()
        const targetMonth = month || String(currentDate.getMonth() + 1).padStart(2, '0')
        const targetYear = year || currentDate.getFullYear()
        
        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è:', { familyId, targetMonth, targetYear })
        
        await SupabaseService.recalculateMonthlyStats(familyId, targetMonth, targetYear)
      }
      
      await fetchStats() // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      throw err
    } finally {
      setLoading(false)
    }
  }

  const recalculateAllAnalytics = async () => {
    try {
      setError(null)
      setLoading(true) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      
      console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Å–µ–º—å–∏:', familyId)
      
      await SupabaseService.recalculateFamilyAnalytics(familyId)
      await fetchStats() // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      
      console.log('‚úÖ –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')
      throw err
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (familyId) {
      fetchStats()
    }
  }, [familyId, month, year])

  return {
    stats,
    loading,
    error,
    refetch: fetchStats,
    createOrUpdateStats,
    recalculateStats,
    recalculateAllAnalytics
  }
}
